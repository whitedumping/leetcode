链接：https://leetcode-cn.com/problems/linked-list-cycle-ii
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Example 2:

Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.


Example 3:

Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.


 

Follow-up:
Can you solve it without using extra space?

官方题解https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode/
//快慢指针，快指针速度是慢指针的两倍
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *p1, *p2;
        p1 = head;
        p2 = head;
        while(p1 != NULL && p2 != NULL){
            p1 = p1 -> next;
            if(p2 != NULL) p2 = p2 -> next;
            else return NULL;
            if(p2 != NULL) p2 = p2 -> next;
            else return NULL;
            if(p1 == p2) break;
        }
        if(p1 == NULL || p2 == NULL) return NULL;
        while(head != p1){
            head = head -> next;
            p1 = p1 -> next;
        }
        return head;
    }
};
