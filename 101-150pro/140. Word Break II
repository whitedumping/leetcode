链接：https://leetcode-cn.com/problems/word-break-ii
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]

//记忆化回溯 + 保存中间结果
class Solution {
public:
    vector<string> res;
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        set<string> word_set(wordDict.begin(), wordDict.end());
        vector<int> memo(s.length(), 2);
        string temps = "";
        backtracking(0, s, word_set, memo, temps);
        return res;
    }
    
    bool backtracking(int start, string s, set<string>& word_set, vector<int>& memo, string temps){
        //for(auto it : memo) cout<<it<<" ";
        //cout<<endl;
        if(start == s.length()){
            res.push_back(temps);
            return 1;
        }
        if(memo[start] == 0){
            return memo[start];
        }
        for(int i = start; i < s.length(); i++){
            string ss = s.substr(start, i - start + 1);
            if(word_set.find(ss) != word_set.end() && 
               backtracking(i + 1, s, word_set, memo, temps == "" ? ss : (temps + " " + ss))){
                memo[start] = 1;
            }
        }
        if(memo[start] == 2) memo[start] = 0;
        return memo[start];
    }
};
