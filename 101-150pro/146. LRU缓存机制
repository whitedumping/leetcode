链接：https://leetcode-cn.com/problems/lru-cache
运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。

获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。
写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。

进阶:

你是否可以在 O(1) 时间复杂度内完成这两种操作？

示例:

LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回  1
cache.put(3, 3);    // 该操作会使得密钥 2 作废
cache.get(2);       // 返回 -1 (未找到)
cache.put(4, 4);    // 该操作会使得密钥 1 作废
cache.get(1);       // 返回 -1 (未找到)
cache.get(3);       // 返回  3
cache.get(4);       // 返回  4


class LRUCache {
public:
    map<int, int> cache;
    vector<int> flag;
    int total_cnt = 0;
    int c = 0;
    LRUCache(int capacity) {
        total_cnt = capacity;
    }
    
    int get(int key) {
        /*cout<<c++<<"::";
        for(auto m : cache) cout<<m.first<<" "<<m.second<<endl;
        cout<<endl;*/
        if(cache.find(key) != cache.end()){
            for(int i = 0; i < flag.size(); i++){
                if(flag[i] == key){
                    flag.erase(flag.begin() + i);
                    break;
                }
            }
            flag.push_back(key);
            return cache[key];
        }
        else return -1;
    }
    
    void put(int key, int value) {
        /*cout<<c++<<"::";
        for(auto m : cache) cout<<m.first<<" "<<m.second<<endl;
        cout<<endl;*/
        if(cache.find(key) != cache.end()){
            cache[key] = value;
            for(int i = 0; i < flag.size(); i++){
                if(flag[i] == key){
                    flag.erase(flag.begin() + i);
                    break;
                }
            }
            flag.push_back(key);
            return ;
        }
        if(cache.size() == total_cnt){
            cout<<flag[0]<<endl;
            map<int, int> :: iterator it = cache.find(flag[0]);
            //cache.erase(it -> second);
            cache.erase(flag[0]);
            flag.erase(flag.begin());
        }
        cache.insert(make_pair(key, value));
        flag.push_back(key);
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
