链接：https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal
给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回锯齿形层次遍历如下：

[
  [3],
  [20,9],
  [15,7]
]

模拟
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> q;
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(root == NULL) return res;
        q.push_back(root);
        int flag = 0;
        while(q.size() != 0){
            vector<int> temp;
            vector<TreeNode*> t;
            if(flag == 0){//从左到右
                for(int i = 0; i < q.size(); i++){
                    if(q[i] != NULL) temp.push_back(q[i] -> val);
                }
            }
            if(flag == 1){//从右到左
                for(int i = q.size() - 1; i >= 0; i--){
                    if(q[i] != NULL) temp.push_back(q[i] -> val);
                }
            }
            if(!temp.empty()) res.push_back(temp);
            
            for(int i = 0; i < q.size(); i++){
                if(q[i] != NULL){
                    if(q[i] -> left != NULL) t.push_back(q[i] -> left);
                    if(q[i] -> right != NULL) t.push_back(q[i] -> right);
                }
            }
            q = t;
            flag = (flag + 1) % 2;
        }
        return res;
    }
};
