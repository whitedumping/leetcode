链接：https://leetcode-cn.com/problems/word-ladder
给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：

每次转换只能改变一个字母。
转换过程中的中间单词必须是字典中的单词。
说明:

如果不存在这样的转换序列，返回 0。
所有单词具有相同的长度。
所有单词只由小写字母组成。
字典中不存在重复的单词。
你可以假设 beginWord 和 endWord 是非空的，且二者不相同。
示例 1:

输入:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

输出: 5

解释: 一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog",
     返回它的长度 5。
示例 2:

输入:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

输出: 0

解释: endWord "cog" 不在字典中，所以无法进行转换。

思路:从beginword和endword开始两边进行层序遍历，当某一个单词出现在对方层中时即为最短距离
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        set<string> words(wordList.begin(), wordList.end()), left{beginWord}, right{endWord};
        if(words.find(endWord) == words.end()) return 0;
        else words.erase(words.find(endWord));
        if(words.find(beginWord) != words.end()) words.erase(words.find(beginWord));
        
        
        
        set<string> :: iterator itword;
        int len, cnt1 = 0, cnt2 = 0;
        char cc;
        while(left.size() || right.size()){
            if(left.size()){
                cout<<"l:\t";
                for(auto it : left) cout<<it<<" ";
                cout<<endl;
                
                cnt1++;
                set<string> temp;
                //for(set<string> :: iterator it = left.begin(); it != left.end(); it++){
                for(auto word : left){
                    len = word.length();
                    for(int i = 0; i < len; i++){
                        
                        cc = word[i];
                        for(int c = 'a'; c < 'z'; c++){
                            word[i] = c;
                            itword = words.find(word);
                            if(itword != words.end()){
                                temp.insert(word);
                                words.erase(itword);
                            }
                            itword = right.find(word);
                            if(itword != right.end()) return cnt1 + cnt2 + 1;
                        }
                        word[i] = cc;
                    }
                }
                left = temp;
            }
            if(right.size()){
                cout<<"r:\t";
                for(auto it : right) cout<<it<<" ";
                cout<<endl;
                
                cnt2++;
                set<string> temp;
                //for(set<string> :: iterator it = left.begin(); it != left.end(); it++){
                for(auto word : right){
                    len = word.length();
                    for(int i = 0; i < len; i++){
                        itword = left.find(word);
                        if(itword != left.end()) return cnt1 + cnt2;
                        cc = word[i];
                        for(int c = 'a'; c < 'z'; c++){
                            word[i] = c;
                            itword = words.find(word);
                            if(itword != words.end()){
                                temp.insert(word);
                                words.erase(itword);
                            }
                            itword = left.find(word);
                            if(itword != left.end()) return cnt1 + cnt2 + 1;
                        }
                        word[i] = cc;
                    }
                }
                right = temp;
            }
        }
        return 0;
    }
};
