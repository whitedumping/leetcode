链接：https://leetcode-cn.com/problems/surrounded-regions
给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。

找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。

示例:

X X X X
X O O X
X X O X
X O X X
运行你的函数后，矩阵变为：

X X X X
X X X X
X X X X
X O X X
解释:

被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。

思路：将四条边界上相邻的所有’O‘对应的flag位置标记为1
class Solution {
public:
    vector<vector<bool>> flag;
    int m, n;
    void solve(vector<vector<char>>& board) {
        if(board.empty()) return;
        m = board.size(), n = board[0].size();
        flag = vector<vector<bool>>(m, vector<bool>(n, 0));
        //上下
        for(int i = 0; i < n; i++){
            if(board[0][i] == 'O' && flag[0][i] == 0){
                dfs(board, 0, i);
            }
            if(board[m - 1][i] == 'O' && flag[m - 1][i] == 0){
                dfs(board, m - 1, i);
            }
        }
        //左右
        for(int i = 0; i < m; i++){
            if(board[i][0] == 'O' && flag[i][0] == 0){
                dfs(board, i, 0);
            }
            if(board[i][n - 1] == 'O' && flag[i][n - 1] == 0){
                dfs(board, i, n - 1);
            }
        }
        //修改
        for(int i = 1; i < m - 1; i++){
            for(int j = 1; j < n - 1; j++){
                if(board[i][j] == 'O' && flag[i][j] == 0) board[i][j] = 'X';
            }
        }
        
        /*for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                cout<<flag[i][j]<<"\t";
            }
            cout<<endl;
        }*/
    }
    
    void dfs(vector<vector<char>>& board, int a, int b){
        flag[a][b] = 1;
        //上
        if(a - 1 >= 0 && board[a - 1][b] == 'O' && flag[a - 1][b] == 0) dfs(board, a - 1, b);
        //右
        if(b + 1 < n && board[a][b + 1] == 'O' && flag[a][b + 1] == 0) dfs(board, a, b + 1);
        //下
        if(a + 1 < m && board[a + 1][b] == 'O' && flag[a + 1][b] == 0) dfs(board, a + 1, b);
        //左
        if(b - 1 >= 0 && board[a][b - 1] == 'O' && flag[a][b - 1] == 0) dfs(board, a, b - 1);
    }
};
