链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1] 
输出: 0 
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。

动态规划：dp[i][k][1/0] 表示当前第k次交易，第i天手上有/无股票
         //当前j次数交易，第i天，手上没有股票，等于前一天，j次交易的情况与前一天j次交易手上有股票，今天卖掉的二者最大值
        dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i - 1]);
        //当前j次交易，第i天，手上有股票，等于前一天j次交易手上有股票与前一天j - 1次交易手上无股票，今天购买股票
        dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i - 1]);

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //动态规划dp[i][k][0-1]第i天，至多进行k次交易，0无股票，1有股票的最大收益利润
        //4个变量 dp_1_0 还有一次交易次数无股票的最大收益
        //dp_1_1 还有一次交易次数有股票的最大收益
        //dp_2_0 进行两次交易次数无股票的最大收益
        //dp_2_1 进行两次交易次数有股票的最大收益
        /*int dp_2_0 = 0, dp_1_0 = 0; 
        int dp_2_1 = INT_MIN, dp_1_1 = INT_MIN;
        for(auto p : prices) {
            dp_2_0 = max(dp_2_0, dp_2_1 + p);
            dp_2_1 = max(dp_2_1, dp_1_0 - p);
            dp_1_0 = max(dp_1_0, dp_1_1 + p);
            dp_1_1 = max(dp_1_1, -p);
        }
        return dp_2_0;*/
        
        int len = prices.size(), k = 2;
        if(len == 0) return 0;
        vector<vector<vector<int>>> dp(len + 1, vector<vector<int>>(k + 1, vector<int>(2)));
        
        for(int i = 1; i <= k; i++){
            dp[0][i][0] = 0;
            dp[0][i][1] = INT_MIN;
        }
        
        for(int i = 1; i <= len; i++){
            for(int j = k; j > 0; j--){
                //当前j次数交易，第i天，手上没有股票，等于前一天，j次交易的情况与前一天j次交易手上有股票，今天卖掉的二者最大值
                dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i - 1]);
                //当前j次交易，第i天，手上有股票，等于前一天j次交易手上有股票与前一天j - 1次交易手上无股票，今天购买股票
                dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i - 1]);
            }
        }
        return dp[len][k][0];
        
        /*dp[-1][k][0] = dp[i][0][0] = 0
        dp[-1][k][1] = dp[i][0][1] = -infinity
        dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i]);
        dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);、*/
    }
};
