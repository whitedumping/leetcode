给定一个9*9的数独状态，寻找一个合法的填法
回溯，递归，使用三维数组存储约束条件

int flag[9][9][9] = {0};
void solveSudoku(vector<vector<char>>& board) {
    initFlag(board);
    for(int i = 0; i < 9; i++){
        for(int j = 0; j < 9; j++){
            if(board[i][j] == '.'){
                insertNum(board, i, j);
            }
        }
    }
}
//插入函数，并回溯
bool insertNum(vector<vector<char>>& board, int i, int j){
    int f = false;
    //若当前格子不需要填写
    if(board[i][j] != '.'){
        if(i >= 8 && j >= 8) f = true;
        else if(j == 8){
            f = insertNum(board, i + 1, 0);
        }
        else f = insertNum(board, i, j + 1);
        return f;
    }else{
        for(int k = 0; k < 9; k++){
            if(flag[i][j][k] == 0){
                board[i][j] = k + 1 + '0';
                flag[i][j][k] = 1;
                dealFlag(board, i, j, k + 1, true);
                //cout<<i<<j<<" "<<board[i][j]<<endl;
                //for(int i = 0; i < 9; i++)
                //    if(flag[7][7][i] == 0) cout<<i + 1<<ends;
                //cout<<endl;
                //回溯出口条件
                if(i >= 8 && j >= 8) return true;
                else if(j == 8){
                    f = insertNum(board, i + 1, 0);
                }
                else f = insertNum(board, i, j + 1);
                if(f == false){
                    dealFlag(board, i, j, k + 1, false);
                    //for(int i = 0; i < 9; i++)
                    //    if(flag[7][7][i] == 0) cout<<i + 1<<ends;
                    //cout<<endl;
                    board[i][j] = '.';
                    flag[i][j][k] = 0;
                }else return true;
            }
        }
        return false;
    }

}
每次尝试插入数之后修改约束条件数组
void dealFlag(vector<vector<char>>& board, int i, int j, int num, bool f){
    for(int k = 0; k < 9; k++){
        if(f){
            if(board[i][k] == '.') flag[i][k][num - 1]++;
            if(board[k][j] == '.') flag[k][j][num - 1]++;
        }else{
            if(board[i][k] == '.') flag[i][k][num - 1]--;
            if(board[k][j] == '.') flag[k][j][num - 1]--;
        }
    }

    int m = i / 3 * 3, n = j / 3 * 3;
    for(int k = 0; k < 3; k++){
        for(int q = 0; q < 3; q++){
            if(board[m + k][n + q] == '.'){
                if(f) flag[m + k][n + q][num - 1]++;
                else flag[m + k][n + q][num - 1]--;
            }
        }
    }
}
//初始化约束条件数组
void initFlag(vector<vector<char>>& board) {
    int temp;
    for(int i = 0; i < 9; i++){
        for(int j = 0; j < 9; j++){
            temp = board[i][j] - 1 - '0';
            if(board[i][j] != '.'){
                for(int k = 0; k < 9; k++){
                    flag[i][k][temp] = 1;
                    flag[k][j][temp] = 1;
                }
                int m = i / 3 * 3, n = j / 3 * 3;
                for(int k = 0; k < 3; k++){
                    for(int q = 0; q < 3; q++){
                        if(board[m + k][n + q] == '.'){
                            flag[m + k][n + q][temp] = 1;
                        }
                    }
                }
            }
        }
    }
}
