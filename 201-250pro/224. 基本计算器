实现一个基本的计算器来计算一个简单的字符串表达式的值。

字符串表达式可以包含左括号 ( ，右括号 )，加号 + ，减号 -，非负整数和空格  。

示例 1:

输入: "1 + 1"
输出: 2
示例 2:

输入: " 2-1 + 2 "
输出: 3
示例 3:

输入: "(1+(4+5+2)-3)+(6+8)"
输出: 23
说明：

你可以假设所给定的表达式都是有效的。
请不要使用内置的库函数 eval。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/basic-calculator
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//模拟
class Solution {
public:
    int calculate(string s) {
        s += ' ';
        stack<char> st;
        stack<long> nums;
        
        int cnt = 0;
        bool flag = false;
        long t = 0;
        for(auto i : s){
            //cout<<i<<" ";
            if(i == ' '){
                if(flag) nums.push(t), t = 0, flag = false;
            }
            else if(i == '+' || i == '-'){
                if(flag) nums.push(t), t = 0, flag = false;
                while(!st.empty() && nums.size() > 1 && (st.top() == '+' || st.top() == '-')){
                    char c = st.top();
                    st.pop();
                    int t1 = nums.top();
                    nums.pop();
                    int t2 = nums.top();
                    nums.pop();

                    if(c == '+') nums.push(t2 + t1);
                    if(c == '-') nums.push(t2 - t1);
                }
                st.push(i);
            }
            else if(i == '(') ++cnt, st.push(i);
            else if(i == ')'){
                if(flag) nums.push(t), t = 0, flag = false;

                while(!st.empty() && nums.size() > 1 && (st.top() == '+' || st.top() == '-')){
                    char c = st.top();
                    st.pop();
                    int t1 = nums.top();
                    nums.pop();
                    int t2 = nums.top();
                    nums.pop();

                    if(c == '+') nums.push(t2 + t1);
                    if(c == '-') nums.push(t2 - t1);
                }
                st.pop();
                --cnt;
            }else{
                flag = true;
                t = t * 10 + i - '0';
            }
            
            while(!st.empty() && nums.size() > 1 + cnt && (st.top() == '+' || st.top() == '-')){
                char c = st.top();
                st.pop();
                int t1 = nums.top();
                nums.pop();
                int t2 = nums.top();
                nums.pop();
                
                if(c == '+') nums.push(t2 + t1);
                if(c == '-') nums.push(t2 - t1);
            }
            
            //if(nums.size() > 0) cout<<nums.top()<<endl;
            //else cout<<endl;
        }
        
        return nums.top();
    }
};
