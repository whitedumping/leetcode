你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [2,3,2]
输出: 3
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
示例 2:

输入: [1,2,3,1]
输出: 4
解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/house-robber-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//按照特殊点，分为第一个点选与不选的两种情况
class Solution {
public:
    int rob(vector<int>& nums) {
        /*int len = nums.size();
        if(len == 0) return 0;
        vector<vector<int>> dp(len + 2, vector<int>(2));
        for(int i = 0; i < len; i++){
            dp[i + 2][0] = max(dp[i + 1][1], dp[i + 1][0]);
            dp[i + 2][1] = max(dp[i][1], dp[i][0]) + nums[i];
        }
        return max(dp[len + 1][0], dp[len + 1][1]);
        int dp_pre = 0, dp_cur = 0, dp_t;
        for(auto num : nums){
            dp_t = dp_cur;
            dp_cur = max(dp_pre + num, dp_cur);
            dp_pre = dp_t;
        }
        return dp_cur;*/
        int len = nums.size();
        if(len < 2) return len == 0 ? 0 : nums[0];
        int dp_pre = 0, dp_cur = nums[0], dp_t, res;
        for(int i = 1; i < len - 1; i++){
            dp_t = dp_cur;
            dp_cur = max(dp_pre + nums[i], dp_cur);
            dp_pre = dp_t;
        }
        res = dp_cur;
        dp_pre = 0, dp_cur = nums[1];
        for(int i = 2; i < len; i++){
            dp_t = dp_cur;
            dp_cur = max(dp_pre + nums[i], dp_cur);
            dp_pre = dp_t;
        }
        
        return max(res, dp_cur);
    }
};
