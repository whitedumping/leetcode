给定一个大小为 n 的数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。

说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。

示例 1:

输入: [3,2,3]
输出: [3]
示例 2:

输入: [1,1,1,3,3,2,2,2]
输出: [1,2]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/majority-element-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//投票法
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        //超过n/3的最多只有两个
        int len = nums.size();
        if(len < 2) return nums;
        vector<int> res;
        
        //假设当前a，b为候选者
        int a = nums[0], b = nums[0];
        int cnta = 0, cntb = 0;
        for(int i = 0; i < len; i++){
            if(nums[i] == a){
                ++cnta;
                continue;
            }
            if(nums[i] == b){
                ++cntb;
                continue;
            }
            if(!cnta){
                a = nums[i];
                ++cnta;
                continue;
            }
            if(!cntb){
                b = nums[i];
                ++cntb;
                continue;
            }
            --cnta, --cntb;
            
            //cout<<a<<"："<<cnta<<" ";
            //cout<<b<<"："<<cntb<<endl;
        }
        
        cnta = 0, cntb = 0;
        for(auto n : nums){
            if(n == a) ++cnta;
            else if(n == b) ++cntb;
        }
        
        if(cnta > (len / 3)) res.push_back(a);
        if(cntb > (len / 3)) res.push_back(b);
        
        return res;
    }
};
