给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回滑动窗口中的最大值。

 

示例:

输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 

提示：

你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。

 

进阶：

你能在线性时间复杂度内解决此题吗？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sliding-window-maximum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        map<int, int> k_map;
        int len = nums.size(), cnt = 0;
        for(int i = 0; i < len; i++){
            if(k_map.find(nums[i]) == k_map.end())
                k_map.insert(make_pair(nums[i], 1));
            else ++k_map[nums[i]];
            ++cnt;
            if(cnt == k){
                res.push_back(k_map.rbegin() -> first);
                //cout<<*k_set.rbegin()<<endl;
                if(k_map[nums[i - k + 1]] == 1){
                    k_map.erase(nums[i - k + 1]);
                }
                else{
                    --k_map[nums[i - k + 1]];
                }
                --cnt;
            }
            /*
            for(map<int, int> :: iterator it = k_map.begin(); it != k_map.end(); it++)
                cout<<it -> first<<" "<<it -> second<<" ";
            cout<<endl;*/
        }
        return res;
    }
};
