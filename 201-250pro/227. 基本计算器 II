实现一个基本的计算器来计算一个简单的字符串表达式的值。

字符串表达式仅包含非负整数，+， - ，*，/ 四种运算符和空格  。 整数除法仅保留整数部分。

示例 1:

输入: "3+2*2"
输出: 7
示例 2:

输入: " 3/2 "
输出: 1
示例 3:

输入: " 3+5 / 2 "
输出: 5
说明：

你可以假设所给定的表达式都是有效的。
请不要使用内置的库函数 eval。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/basic-calculator-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//模拟
class Solution {
public:
    int calculate(string s) {
        s += ' ';
        stack<char> st;
        stack<long> nums;
        
        char pre;
        int cnt = 0;
        bool flag = false;
        long t = 0;
        for(auto i : s){
            //cout<<i<<" ";
            if(i == ' '){
                if(flag){
                    nums.push(t), t = 0, flag = false;
                    while(!st.empty() && nums.size() > 1 && (st.top() == '*' || st.top() == '/')){
                        char c = st.top();
                        st.pop();
                        int t1 = nums.top();
                        nums.pop();
                        int t2 = nums.top();
                        nums.pop();
                        //cout<<111<<" "<<t2<<c<<t1<<endl;
                        if(c == '*') nums.push(t2 * t1);
                        if(c == '/') nums.push(t2 / t1);
                    }
                }
            }
            else if(i == '+' || i == '-'){
                if(flag) nums.push(t), t = 0, flag = false;
                while(!st.empty() && nums.size() > 1 && (st.top() == '*' || st.top() == '/')){
                    char c = st.top();
                    st.pop();
                    int t1 = nums.top();
                    nums.pop();
                    int t2 = nums.top();
                    nums.pop();
                    //cout<<222<<" "<<t2<<c<<t1<<endl;
                    if(c == '*') nums.push(t2 * t1);
                    if(c == '/') nums.push(t2 / t1);
                }
                st.push(i);
            }else if(i == '*' || i == '/'){
                if(flag) nums.push(t), t = 0, flag = false;
                while(!st.empty() && nums.size() > 1 && (st.top() == '*' || st.top() == '/')){
                    char c = st.top();
                    st.pop();
                    int t1 = nums.top();
                    nums.pop();
                    int t2 = nums.top();
                    nums.pop();
                    //cout<<333<<" "<<t2<<c<<t1<<endl;
                    if(c == '*') nums.push(t2 * t1);
                    if(c == '/') nums.push(t2 / t1);
                }
                st.push(i);
            }
            else{
                flag = true;
                t = t * 10 + i - '0';
            }
        }
        stack<char> stt;
        while(!st.empty()){
            stt.push(st.top());
            st.pop();
        }
        stack<int> ns;
        while(!nums.empty()){
            ns.push(nums.top());
            nums.pop();
        }
        while(!stt.empty()){
            char c = stt.top();
            stt.pop();
            int t1 = ns.top();
            ns.pop();
            int t2 = ns.top();
            ns.pop();
            //cout<<t2<<c<<t1<<endl;
            if(c == '+') ns.push(t1 + t2);
            if(c == '-') ns.push(t1 - t2);
        }
        return ns.top();
    }
};
