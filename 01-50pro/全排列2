链接：https://leetcode-cn.com/problems/permutations-ii
给定一个可包含重复数字的序列，返回所有不重复的全排列。
示例:

输入: [1,1,2]
输出:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

题解：回溯
先对nums进行排序，相同的数便连续，保持nums不变，并用flag进行标识，按回溯法依次选取对应的数到temp中

vector<vector<int>> res;
vector<int> flag;
vector<int> n;
vector<vector<int>> permuteUnique(vector<int>& nums) {
    int len = nums.size();
    sort(nums.begin(), nums.end());
    n = nums;
    vector<int> temp;
    flag = vector<int>(len, 0);
    //for(int i = 0; i < len; i++) cout<<flag[i];
    backtrace(temp, 0, len);
    return res;
}

void backtrace(vector<int>& temp, int depth, int len){
    if(depth == len){
        res.push_back(vector<int> {temp.begin(), temp.end()});
    }else{
        for(int i = 0; i < len; i++){
            if(flag[i] == 0){
                if(i > 0 && n[i] == n[i - 1] && flag[i - 1] == 0) continue;
                flag[i] = 1;
                temp.push_back(n[i]);
                backtrace(temp, depth + 1, len);
                temp.pop_back();
                flag[i] = 0;
            }
        }
    }
}
