假设按照升序排序的数组在预先未知的某个点上进行了旋转。
( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。
你可以假设数组中不存在重复的元素。
你的算法时间复杂度必须是 O(log n) 级别。
示例 1:
  输入: nums = [4,5,6,7,0,1,2], target = 0
  输出: 4

官方题解：
采用二分法，满足logn
step1：二分找到旋转的下标
step2：二分查找目标值

int search(vector<int>& nums, int target) {
    if(nums.empty()) return -1;
    int left = 0, right = nums.size() - 1, mid, index = 0, res = -1;
    if(right == 0) return target == nums[0] ? 0 : -1;
    //find the smallest element
    if(nums[left] < nums[right]) index = 0;
    else{
        while(left <= right){
            mid = (left + right) / 2;
            if(nums[mid] > nums[mid + 1]){
                index = mid + 1;
                break;
            }else if(nums[mid] < nums[left]){ //the smallest element in left
                right = mid - 1;
            }else{  //the smallest in right
                left = mid + 1;
            }
        }
    }
    if(target >= nums[0] && index > 0 && target <= nums[index - 1]){
        left = 0;
        right = index - 1;
        while(left <= right){
            mid = (left + right) / 2;
            if(nums[mid] < target){
                left = mid + 1;
            }else if(nums[mid] == target){
                res = mid;
                break;
            }else{
                right = mid - 1;
            }
        }
    }else if(target >= nums[index] && target <= nums[nums.size() - 1]){
        left = index;
        right = nums.size() - 1;
        while(left <= right){
            mid = (left + right) / 2;
            if(nums[mid] < target){
                left = mid + 1;
            }else if(nums[mid] == target){
                res = mid;
                break;
            }else{
                right = mid - 1;
            }
        }
    }else return res;
    return res;
}
