给定一个整数序列：a1, a2, ..., an，一个132模式的子序列 ai, aj, ak 被定义为：当 i < j < k 时，ai < ak < aj。设计一个算法，当给定有 n 个数字的序列时，验证这个序列中是否含有132模式的子序列。

注意：n 的值小于15000。

示例1:

输入: [1, 2, 3, 4]

输出: False

解释: 序列中不存在132模式的子序列。
示例 2:

输入: [3, 1, 4, 2]

输出: True

解释: 序列中有 1 个132模式的子序列： [1, 4, 2].
示例 3:

输入: [-1, 3, 2, 0]

输出: True

解释: 序列中有 3 个132模式的的子序列: [-1, 3, 2], [-1, 3, 0] 和 [-1, 2, 0].


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/132-pattern
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//保存一个当前最小的数组dp
//维护栈，保存当前大于dp[i]的值

class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        int n = nums.size();
        if(n < 3) return false;
        vector<int> dp(n, 0);
        dp[0] = nums[0];
        for(int i = 1; i < n; ++i){
            dp[i] = min(dp[i - 1], nums[i]);
        }
        stack<int> st;
        for(int i = n - 1; i >= 0; --i){
            //if(!st.empty() && nums[i] > st.top()) return true;
            if(nums[i] > dp[i]){
                while(!st.empty() && dp[i] >= st.top()) st.pop();
                //st.push(nums[i]);
                if(!st.empty() && nums[i] > st.top()) return true;
                st.push(nums[i]);
            }
        }
        return false;
    }
};
