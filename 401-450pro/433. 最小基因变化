一条基因序列由一个带有8个字符的字符串表示，其中每个字符都属于 "A", "C", "G", "T"中的任意一个。

假设我们要调查一个基因序列的变化。一次基因变化意味着这个基因序列中的一个字符发生了变化。

例如，基因序列由"AACCGGTT" 变化至 "AACCGGTA" 即发生了一次基因变化。

与此同时，每一次基因变化的结果，都需要是一个合法的基因串，即该结果属于一个基因库。

现在给定3个参数 — start, end, bank，分别代表起始基因序列，目标基因序列及基因库，请找出能够使起始基因序列变化为目标基因序列所需的最少变化次数。如果无法实现目标变化，请返回 -1。

注意:

起始基因序列默认是合法的，但是它并不一定会出现在基因库中。
所有的目标基因序列必须是合法的。
假定起始基因序列与目标基因序列是不一样的。
示例 1:

start: "AACCGGTT"
end:   "AACCGGTA"
bank: ["AACCGGTA"]

返回值: 1
示例 2:

start: "AACCGGTT"
end:   "AAACGGTA"
bank: ["AACCGGTA", "AACCGCTA", "AAACGGTA"]

返回值: 2
示例 3:

start: "AAAAACCC"
end:   "AACCCCCC"
bank: ["AAAACCCC", "AAACCCCC", "AACCCCCC"]

返回值: 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-genetic-mutation
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//bfs

class Solution {
public:
    bool cmp(string& a, string& b){
        int lena = a.length(), lenb = b.length();
        int cnt = 0;
        for(int i = 0; i < lena; ++i){
            if(a[i] != b[i]) ++cnt;
            if(cnt > 1) return false;
        }
        return true;
    }
    
    bool isV(vector<bool>& visited){
        for(auto i : visited){
            if(!i) return true;
        }
        return false;
    }

    int minMutation(string start, string end, vector<string>& bank) {
        if(bank.empty()) return -1;
        map<string, vector<int>> m;

        int a = bank.size(), end_idx = -1;
        for(int i = 0; i < a; ++i){
            if(bank[i] == start) continue;
            if(bank[i] == end) end_idx = i;
            for(int j = i + 1; j < a; ++j){
                if(cmp(bank[i], bank[j])){
                    m[bank[i]].emplace_back(j);
                    m[bank[j]].emplace_back(i);
                }
            }
        }
        for(int i = 0; i < a; ++i){
            if(bank[i] == start) continue;
            if(cmp(bank[i], start)){
                m[start].emplace_back(i);
            }
        }

        if(end_idx < 0) return -1;

        unordered_set<int> visited;
        queue<int> qu;
        for(auto i : m[start]){
            if(i == end_idx) return 1;
            qu.push(i);
            visited.insert(i);
        }
        int cnt = 1;
        while(!qu.empty()){
            int len = qu.size();
            while(len--){
                auto it = qu.front();
                qu.pop();
                for(auto i : m[bank[it]]){
                    if(i == end_idx) return cnt + 1;
                    if(visited.find(i) == visited.end()) qu.push(i);
                    visited.insert(i);
                }
            }
            ++cnt;
        }
        return -1;
    }
};
