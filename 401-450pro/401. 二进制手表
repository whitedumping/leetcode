二进制手表顶部有 4 个 LED 代表 小时（0-11），底部的 6 个 LED 代表 分钟（0-59）。

每个 LED 代表一个 0 或 1，最低位在右侧。



例如，上面的二进制手表读取 “3:25”。

给定一个非负整数 n 代表当前 LED 亮着的数量，返回所有可能的时间。

 

示例：

输入: n = 1
返回: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
 

提示：

输出的顺序没有要求。
小时不会以零开头，比如 “01:00” 是不允许的，应为 “1:00”。
分钟必须由两位数组成，可能会以零开头，比如 “10:2” 是无效的，应为 “10:02”。
超过表示范围（小时 0-11，分钟 0-59）的数据将会被舍弃，也就是说不会出现 "13:00", "0:61" 等时间。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-watch
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//模拟，组合


class Solution {
public:
    vector<string> readBinaryWatch(int num) {
        vector<vector<string>> dp_up(4, vector<string>());
        vector<vector<string>> dp_down(6, vector<string>());
        for(int i = 0; i < 12; ++i){
            dp_up[f(i)].emplace_back(to_string(i));
        }

        dp_down[0].emplace_back("00");
        for(int i = 1; i < 60; ++i){
            if(i < 10) dp_down[f(i)].emplace_back('0' + to_string(i));
            else dp_down[f(i)].emplace_back(to_string(i));
        }
        vector<string> res;
        for(int i = 0; i < 4 && i <= num; ++i){
            if(num - i < 6){
                ff(dp_up[i], dp_down[num - i], res);
            }
        }

        return res;
    }

    int f(int a){
        int cnt = 0;
        while(a > 0){
            cnt += a & 1;
            a >>= 1;
        }
        return cnt;
    }

    void ff(vector<string>& a, vector<string>& b, vector<string>& res){
        for(auto aa : a){
            for(auto bb : b){
                res.emplace_back(aa + ':' + bb);
            }
        }
    }
};
