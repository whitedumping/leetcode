给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。

规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。

请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。

 

提示：

输出坐标的顺序不重要
m 和 n 都小于150
 

示例：

 

给定下面的 5x5 矩阵:

  太平洋 ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * 大西洋

返回:

[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).
 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/pacific-atlantic-water-flow
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//两个访问数组
//分别从边界开始访问，两个数组能够共同到达的地方即为解

class Solution {
public:
    vector<vector<int>> res;
    vector<int> dir{-1, 0, 1, 0, -1};
    int a, b;
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& matrix) {
        if(matrix.empty()) return res;
        a = matrix.size(), b = matrix[0].size();
        vector<vector<bool>> visited1 = vector<vector<bool>>(a, vector<bool>(b, 0));
        vector<vector<bool>> visited2 = vector<vector<bool>>(a, vector<bool>(b, 0));
        for(int i = 0; i < a; ++i){
            dfs(matrix, visited1, i, 0);
            dfs(matrix, visited2, i, b - 1);
        }
        for(int j = 0; j < b; ++j){
            dfs(matrix, visited1, 0, j);
            dfs(matrix, visited2, a - 1, j);
        }
        /*
        for(int i = 0; i < a; ++i){
            for(int j = 0; j < b; ++j){
                cout<<visited1[i][j]<<" ";
            }
            cout<<endl;
        }
        
        for(int i = 0; i < a; ++i){
            for(int j = 0; j < b; ++j){
                cout<<visited2[i][j]<<" ";
            }
            cout<<endl;
        }*/

        for(int i = 0; i < a; ++i){
            for(int j = 0; j < b; ++j){
                if(visited1[i][j] & visited2[i][j]) res.emplace_back(vector<int>{i, j});
            }
        }
        return res;
    }

    void dfs(vector<vector<int>>& matrix, vector<vector<bool>>& visited, int m, int n){
        if(visited[m][n]) return;
        int x, y;
        visited[m][n] = 1;
        for(int i = 0; i < 4; ++i){
            x = m + dir[i];
            y = n + dir[i + 1];
            if(x >= 0 && x < a && y >= 0 && y < b && !visited[x][y] && matrix[m][n] <= matrix[x][y]){
                dfs(matrix, visited, x, y);
            }
        }
    }
};
