给定一个非空数组，数组中元素为 a0, a1, a2, … , an-1，其中 0 ≤ ai < 231 。

找到 ai 和aj 最大的异或 (XOR) 运算结果，其中0 ≤ i,  j < n 。

你能在O(n)的时间解决这个问题吗？

示例:

输入: [3, 10, 5, 25, 2, 8]

输出: 28

解释: 最大的结果是 5 ^ 25 = 28.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//字典树
//贪心查找，当前位置为1，则寻常0，找不到0则选择1

class Solution {
public:
    //static int M = 2;
    struct treeNode{
        int val;
        bool isNum = false;
        treeNode* child[2];
    };
    void insert(treeNode* root, int num){
        int temp;
        for(int i = 30; i >= 0; --i){
            temp = (num >> i) & 1;
            if(!(root -> child[temp])){//null
                root -> child[temp] = new treeNode();
                root = root -> child[temp];
            }else root = root -> child[temp];
        }
        root -> val = num;
        root -> isNum = true;
    }

    int findMaximumXOR(vector<int>& nums) {
        int len = nums.size(), temp;
        if(len < 2) return 0;

        treeNode* root = new treeNode(), *p;
        for(int n : nums) insert(root, n);

        int res = 0;
        for(auto n : nums){
            p = root;
            for(int i = 30; i >= 0; --i){
                temp = (n >> i) & 1;
                if(temp) p = p -> child[0] != NULL ? p -> child[0] : p -> child[1];
                else p = p -> child[1] != NULL ? p -> child[1] : p -> child[0];
            }
            res = max(res, n ^ p -> val);
        }
        return res;
    }
};
