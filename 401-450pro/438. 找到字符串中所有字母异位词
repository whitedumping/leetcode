给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。

字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。

说明：

字母异位词指字母相同，但排列不同的字符串。
不考虑答案输出的顺序。
示例 1:

输入:
s: "cbaebabacd" p: "abc"

输出:
[0, 6]

解释:
起始索引等于 0 的子串是 "cba", 它是 "abc" 的字母异位词。
起始索引等于 6 的子串是 "bac", 它是 "abc" 的字母异位词。
 示例 2:

输入:
s: "abab" p: "ab"

输出:
[0, 1, 2]

解释:
起始索引等于 0 的子串是 "ab", 它是 "ab" 的字母异位词。
起始索引等于 1 的子串是 "ba", 它是 "ab" 的字母异位词。
起始索引等于 2 的子串是 "ab", 它是 "ab" 的字母异位词。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-all-anagrams-in-a-string
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//依次比较left，right区间内是否满足题意

class Solution {
public:
    bool cmp(vector<int>& a, vector<int>& b){
        int len = a.size();
        for(int i = 0; i < len; ++i){
            if(a[i] != b[i]) return 0;
        }
        return 1;
    }
    vector<int> findAnagrams(string s, string p) {
        int len = s.length(), n = p.size();
        vector<int> a(26, 0), b(26, 0), res;
        if(len < n) return res;
        int left = 0, right = n - 1;
        for(int i = 0; i < n; ++i){
            a[p[i] - 'a']++;
            b[s[i] - 'a']++;
        }
        while(right < len){
            if(right - left + 1 < n){
                ++right;
                if(right < len) b[s[right] - 'a']++;
            }else{
                if(cmp(a, b)){
                    res.emplace_back(left);
                }
                b[s[left++] - 'a']--;
            }
        }
        return res;
    }
};
