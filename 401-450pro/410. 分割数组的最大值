给定一个非负整数数组和一个整数 m，你需要将这个数组分成 m 个非空的连续子数组。设计一个算法使得这 m 个子数组各自和的最大值最小。

注意:
数组长度 n 满足以下条件:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
示例:

输入:
nums = [7,2,5,10,8]
m = 2

输出:
18

解释:
一共有四种方法将nums分割为2个子数组。
其中最好的方式是将其分为[7,2,5] 和 [10,8]，
因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/split-array-largest-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//二分，left,right确定x的范围，采用二分查找，对于每个mid依次判断是否满足题意
//然后返回满足特意的最小


class Solution {
public:
    bool check(vector<int>& nums, int x, int m){
        int sum = 0;
        for(auto i : nums){
            if(sum + i > x){
                sum = i;
                --m;
            }else sum += i;
        }
        return m > 0;
    }
    int splitArray(vector<int>& nums, int m) {
        int len = nums.size();
        int left = nums[0], right = 0, mid;
        for(auto i : nums){
            if(left < i) left = i;
            right += i;
        }

        while(left < right){
            mid = left + ((right - left) >> 1);
            if(check(nums, mid, m)) right = mid;
            else left = mid + 1;
        }
        return left;
    }
};
