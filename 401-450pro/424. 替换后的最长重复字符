给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换 k 次。在执行上述操作后，找到包含重复字母的最长子串的长度。

注意:
字符串长度 和 k 不会超过 104。

示例 1:

输入:
s = "ABAB", k = 2

输出:
4

解释:
用两个'A'替换为两个'B',反之亦然。
示例 2:

输入:
s = "AABABBA", k = 1

输出:
4

解释:
将中间的一个'A'替换为'B',字符串变为 "AABBBBA"。
子串 "BBBB" 有最长重复字母, 答案为 4。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-repeating-character-replacement
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//滑动窗口
//[left, right]之间，最大的重复的 + 替换的个数==k等于区间长度

class Solution {
public:
    int characterReplacement(string s, int k) {
        int left = 0, right = 0, len = s.length(), maxCount = 0, maxLen = 0;
        vector<int> temp(26, 0);
        while(right < len){
            temp[s[right] - 'A']++;
            maxCount = max(maxCount, temp[s[right] - 'A']);
            if(right - left + 1 - maxCount <= k){
                maxLen = max(maxLen, right - left + 1);
            }else{
                temp[s[left] - 'A']--;
                left++;
            }
            ++right;
        }
        return maxLen;
    }
};
