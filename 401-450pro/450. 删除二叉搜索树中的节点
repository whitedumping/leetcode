给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。

一般来说，删除节点可分为两个步骤：

首先找到需要删除的节点；
如果找到了，删除它。
说明： 要求算法时间复杂度为 O(h)，h 为树的高度。

示例:

root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。

一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。

    5
   / \
  4   6
 /     \
2       7

另一个正确答案是 [5,2,6,null,4,null,7]。

    5
   / \
  2   6
   \   \
    4   7

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/delete-node-in-a-bst
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    //查找中序的前一个数
    int successor(TreeNode* root){
        TreeNode *p = root -> right;
        while(p -> left != nullptr) p = p -> left;
        return p -> val;
    }
    //查找中序的后一个数
    int preSuccessor(TreeNode* root){
        TreeNode* p = root -> left;
        while(p -> right != nullptr) p = p -> right;
        return p -> val;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == nullptr) return nullptr;
        //当前节点如果对于key，则执行删除
        //每次需要放回根节点，因为每次执行删除操作，有可能改变右/左节点
        if(root -> val == key){
            //当前叶子节点
            if(root -> left == nullptr && root -> right == nullptr){
                root = nullptr;
            }else if(root -> right != nullptr){//右子树不为空，则寻找中序右边数
                root -> val = successor(root);
                root -> right = deleteNode(root -> right, root -> val);
            }else{//则寻找中序左边数
                root -> val = preSuccessor(root);
                root -> left = deleteNode(root -> left, root -> val);
            }
        }else if(root -> val < key) root -> right = deleteNode(root -> right, key);
        else root -> left = deleteNode(root -> left, key);
        return root;
    }
};
