链接：https://leetcode-cn.com/problems/repeated-dna-sequences
所有 DNA 由一系列缩写为 A，C，G 和 T 的核苷酸组成，例如：“ACGAATTCCG”。在研究 DNA 时，识别 DNA 中的重复序列有时会对研究非常有帮助。

编写一个函数来查找 DNA 分子中所有出现超多一次的10个字母长的序列（子串）。

示例:

输入: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"

输出: ["AAAAACCCCC", "CCCCCAAAAA"]



用两个set来实现
class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        /*set<string> res_set;
        int len = s.length(), k, j;
        if(len < 10) return vector<string>();
        vector<int> next(10);
        string temp;
        for(int i = 0; i < len - 10; i++){
            temp = s.substr(i, 10);
            if(res_set.find(temp) != res_set.end()) continue;
            getNext(temp, next);
            
            k = 0;
            j = i + 1;
            k = 0;
            while(j < len && k < 10){
                if(k == -1 || s[j] == temp[k]) j++, k++;
                else k = next[k];
            }
            if(k == 10) res_set.insert(string(temp));
        }
        return vector<string>(res_set.begin(), res_set.end());*/
        unordered_set<string> cur, res;
        int len = s.length() - 10;
        if(len == 0) return vector<string>();
        for(int i = 0; i <= len; i++){
            string temp = s.substr(i, 10);
            if(res.find(temp) != res.end()) continue;
            if(cur.find(temp) != cur.end()) res.insert(temp);
            else cur.insert(temp);
        }
        return vector<string>(res.begin(), res.end());
    }
    
    void getNext(string s, vector<int>& next){
        next[0] = -1;
        int i = 0, j = -1, len = s.length();
        while(i < len - 1){
            if(j == -1 || s[i] == s[j]){
                i++;
                j++;
                next[i] = j;
            }else j = next[j];
        }
    }
};
