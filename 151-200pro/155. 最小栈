链接：https://leetcode-cn.com/problems/min-stack
设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。

push(x) -- 将元素 x 推入栈中。
pop() -- 删除栈顶的元素。
top() -- 获取栈顶元素。
getMin() -- 检索栈中的最小元素。
示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.

//维护一个最小值的dp
class MinStack {
public:
    /** initialize your data structure here. */
    vector<int> st;
    vector<int> mins;
    MinStack() {
        
    }
    
    void push(int x) {
        st.push_back(x);
        if(mins.size() != 0) mins.push_back(min(mins[mins.size() - 1], x));
        else mins.push_back(x);
    }
    
    void pop() {
        if(st.empty()) return;
        st.erase(st.begin() + st.size() - 1);
        mins.erase(mins.begin() + mins.size() - 1);
    }
    
    int top() {
        return st[st.size() - 1];
    }
    
    int getMin() {
        return mins[mins.size() - 1];
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
