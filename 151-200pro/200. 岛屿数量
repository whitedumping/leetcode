给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-islands
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

连通图，将边界的0视为连通的
class Solution {
public:
    int m, n, cnt = 0;
    int numIslands(vector<vector<char>>& grid) {
        m = grid.size();
        if(m == 0) return 0;
        n = grid[0].size();
        vector<vector<int>> f(m, vector<int>(n, 0));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == '1' && f[i][j] == 0){
                    sign(i, j, grid, f);
                    cnt++;
                }
            }
        }
        return cnt;
    }
    
    void sign(int a, int b, vector<vector<char>>& grid, vector<vector<int>>& f){
        f[a][b] = 1;
        if(a >= 1 && grid[a - 1][b] == '1' && f[a - 1][b] == 0) sign(a - 1, b, grid, f);
        if(a + 1 < m && grid[a + 1][b] == '1' && f[a + 1][b] == 0) sign(a + 1, b, grid, f);
        
        if(b >= 1 && grid[a][b - 1] == '1' && f[a][b - 1] == 0) sign(a, b - 1, grid, f);
        if(b + 1 < n && grid[a][b + 1] == '1' && f[a][b + 1] == 0) sign(a, b + 1, grid, f);
    }
};
