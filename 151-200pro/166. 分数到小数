链接：https://leetcode-cn.com/problems/fraction-to-recurring-decimal
给定两个整数，分别表示分数的分子 numerator 和分母 denominator，以字符串形式返回小数。

如果小数部分为循环小数，则将循环的部分括在括号内。

示例 1:

输入: numerator = 1, denominator = 2
输出: "0.5"
示例 2:

输入: numerator = 2, denominator = 1
输出: "2"
示例 3:

输入: numerator = 2, denominator = 3
输出: "0.(6)"

class Solution {
public:
    string fractionToDecimal(int numerator, int denominator) {
        if(numerator == 0) return "0";
        int flag = numerator < 0 ^ denominator < 0;
        long numerator_long = abs((long)numerator);
        long denominator_long = abs((long)denominator);
        long t = gcd(numerator_long, denominator_long);
        numerator_long /= t;
        denominator_long /= t;
        
        string res;
        if(flag) res += '-';
        t = numerator_long / denominator_long;
        res += to_string(t);
        if(t != 0) numerator_long = numerator_long % denominator_long;
        
        //map存储中间结果，便于为找到小数后面的循环部分
        unordered_map<int, int> num_map;
        int idx = 0;
        string dot;
        //cout<<denominator_long<<endl;
        //cout<<10 % denominator_long<<endl;
        while(numerator_long != 0 && num_map.find(numerator_long) == num_map.end()){
            num_map[numerator_long] = idx++;
            t = numerator_long * 10;
            dot += to_string(t / denominator_long);
            //cout<<dot<<endl;
            numerator_long = t % denominator_long;
        }
        if(numerator_long != 0){
            dot += ')';
            dot.insert(num_map[numerator_long], "(");
        }
        if(dot != "") res += '.' + dot;
        return res;
    }
    
    int gcd(int a, int b){
        if(b == 0) return a;
        else return gcd(b, a % b);
    }
};
