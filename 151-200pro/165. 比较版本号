链接：https://leetcode-cn.com/problems/compare-version-numbers
比较两个版本号 version1 和 version2。
如果 version1 > version2 返回 1，如果 version1 < version2 返回 -1， 除此之外返回 0。

你可以假设版本字符串非空，并且只包含数字和 . 字符。

 . 字符不代表小数点，而是用于分隔数字序列。

例如，2.5 不是“两个半”，也不是“差一半到三”，而是第二版中的第五个小版本。

你可以假设版本号的每一级的默认修订版号为 0。例如，版本号 3.4 的第一级（大版本）和第二级（小版本）修订号分别为 3 和 4。其第三级和第四级修订号均为 0。
 
示例 1:
输入: version1 = "0.1", version2 = "1.1"
输出: -1
示例 2:
输入: version1 = "1.0.1", version2 = "1"
输出: 1
示例 3:
输入: version1 = "7.5.2.4", version2 = "7.5.3"
输出: -1
示例 4：
输入：version1 = "1.01", version2 = "1.001"
输出：0
解释：忽略前导零，“01” 和 “001” 表示相同的数字 “1”。
示例 5：
输入：version1 = "1.0", version2 = "1.0.0"
输出：0
解释：version1 没有第三级修订号，这意味着它的第三级修订号默认为 “0”。

//去掉多余的0转为整数比较大小
class Solution {
public:
    int compareVersion(string version1, string version2) {
        int v1, v2, t1 = 0, t2 = 0;
        version1.insert(version1.end(), '.');
        version2.insert(version2.end(), '.');
        int i = 0, j = 0, len1 = version1.length(), len2 = version2.length();
        while(i < len1 || j < len2){
            while(i < len1){
                if(version1[i] == '.'){
                    v1 = t1;
                    t1 = 0;
                    i++;
                    break;
                }else{
                    t1 = t1 * 10 + version1[i++] - '0';
                }
            }
            
            while(j < len2){
                if(version2[j] == '.'){
                    v2 = t2;
                    t2 = 0;
                    j++;
                    break;
                }else{
                    t2 = t2 * 10 + version2[j++] - '0';
                }
            }
            cout<<"v1:"<<v1<<" v2:"<<v2<<endl;
            //if(i == len1 && v1 == 0 && v2 == 0) continue;
            //else if(j == len2 && v2 == 0 && v1 == 0) continue;
            if(v1 > v2) return 1;
            else if(v1 < v2) return -1;
            else v1 = 0, v2 = 0;
        }
        return 0;
    }
};
