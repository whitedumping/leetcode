链接：https://leetcode-cn.com/problems/dungeon-game
一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。

骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。

有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。

为了尽快到达公主，骑士决定每次只向右或向下移动一步。

编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。

例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。

-2 (K)	-3	3
-5	-10	1
10	30	-5 (P)
 
说明:
骑士的健康点数没有上限。
任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。

//地下城游戏解法
//dp动规,dp[i][j]表示骑士从索引坐标（i,j）到地下城右下角的索引坐标所需要的最小初始能量
//对此二维矩阵，自上而下的动规是不行的，因为如果进行自上而下的动规，就会牵涉到当前最优解与当前拥有利益值，无法动规下去
//联想到记忆化回朔解法，从而想到对于二维矩阵，记忆化回朔可以改写成自下而上的动态规划

著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m = dungeon.size(), n = dungeon[0].size(), t;
        int cur;
        
        vector<vector<int>> dp(m, vector<int>(n, 0));
        cur = 0;
        for(int j = n - 1; j >= 0; j--){
            cur += dungeon[m - 1][j];
            if(cur >= 0) dp[m - 1][j] = 0, cur = 0;
            else dp[m - 1][j] = cur;
        }
        
        cur = 0;
        for(int i = m - 1; i >= 0; i--){
            cur += dungeon[i][n - 1];
            if(cur >= 0) dp[i][n - 1] = 0, cur = 0;
            else dp[i][n - 1] = cur;
        }
        
        /*for(auto dp1 : dp){
            for(auto dp2 : dp1) cout<<dp2<<" ";
            cout<<endl;
        }*/
        
        for(int i = m - 2; i >= 0; i--){
            for(int j = n - 2; j >= 0; j--){
                dp[i][j] = dungeon[i][j] + max(dp[i + 1][j], dp[i][j + 1]);
                if(dp[i][j] > 0) dp[i][j] = 0;
            }
        }
        
        return -1 * dp[0][0] + 1;
    }
};
