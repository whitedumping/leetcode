链接：https://leetcode-cn.com/problems/maximal-rectangle
给定一个仅包含 0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。
示例:
输入:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
输出: 6

重复使用上一题思路
int maximalRectangle(vector<vector<char>>& matrix) {
    if(matrix.empty()) return 0;
    int m = matrix.size(), n = matrix[0].size();
    if(n == 0) return 0;
    vector<int> temp(n, 0);
    int res = 0;
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            if(matrix[i][j] == '0') temp[j] = 0;
            else temp[j] += matrix[i][j] - '0';
        }
        for(int j = 0; j < n; j++) cout<<temp[j]<<" ";
        cout<<endl;
        res = max(res, largestRectangleArea(temp));
    }
    return res;
}
//求当前最大矩形面积
int largestRectangleArea(vector<int>& heights) {
    int maxres = 0;
    stack<int> st;
    int len = heights.size();
    if(len == 0) return maxres;
    st.push(-1);
    for(int i = 0; i < len; i++){
        while(st.top() != -1 && heights[i] < heights[st.top()]){
            int temp = heights[st.top()];
            st.pop();
            int res = temp * (i - st.top() - 1);
            if(maxres < res){
                maxres = res;
            }
        }
        st.push(i);
    }
    int temp = st.top();
    while(-1 != st.top()){
        int temp1 = st.top();
        st.pop();
        int res = heights[temp1] * (temp - st.top());
        if(maxres < res){
            maxres = res;
        }
    }
    return maxres;
}
