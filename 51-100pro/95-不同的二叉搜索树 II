链接：https://leetcode-cn.com/problems/unique-binary-search-trees-ii
给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。

示例:
输入: 3
输出:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释:
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

注意：bst树定义，遍历，依次去当前点为根节点的bst树，递归求左子树/右，然后进行二层循环组合

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(!n) return vector<TreeNode*> (NULL);
        else return generate(1, n);
    }
    
    vector<TreeNode*> generate(int start, int end){
        vector<TreeNode*> v, l, r;
        for(int i = start; i <= end; i++){
            l = generate(start, i - 1);
            r = generate(i + 1, end);
            for(int j = 0; j < l.size(); j++){
                for(int k = 0; k < r.size(); k++){
                    TreeNode *p = new TreeNode(i);
                    p -> left = l[j];
                    p -> right = r[k];
                    v.push_back(p);
                }
            }
        }
        if(!v.size()) v.push_back(NULL);
        return v;
    }
};
