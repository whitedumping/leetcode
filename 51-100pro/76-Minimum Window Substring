链接：https://leetcode-cn.com/problems/minimum-window-substring
Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

Example:
Input: S = "ADOBECODEBANC", T = "ABC"
Output: "BANC"

思路：双指针，right用于依次移动判断当前left-right间的字符串是否满足题意，当前满足题意的状态下，移动left，以求最短的子串
     重复上一步，直到right==len

string minWindow(string s, string t) {
    int lens = s.length(), lent = t.length();
    if(lens < lent) return "";
    vector<int> map(256, 0);
    int resLeft = 0, resLen = lens + 1;
    int left = 0, right = 0, cnt = 0;
    for(int i = 0; i < lent; i++){
        map[t[i]]++;
    }
    while(left <= lens - lent && right < lens){
        map[s[right]]--;
        if(map[s[right]] >= 0){
            cnt++;
        }
        if(cnt == lent){    //满足当前t的长度
            while(map[s[left]] < 0){
                map[s[left]]++;
                left++;
            }
            if(right - left + 1 < resLen){
                resLeft = left;
                resLen = right - left + 1;
                cout<<resLeft<<" "<<resLen<<endl;
            }
        }
        //cout<<left<<" "<<right<<endl;
        right++;
    }
    //cout<<resLeft<<" "<<resLen<<endl;
    return resLen == lens + 1 ? "" : s.substr(resLeft, resLen);
}
