链接：https://leetcode-cn.com/problems/n-queens
n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。
上图为 8 皇后问题的一种解法。
给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。

每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。
示例:
输入: 4
输出: [
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]
解释: 4 皇后问题存在两个不同的解法。

思路：回溯法，依次进行枚举判断，直接用回溯模板

vector<vector<string>> res;
int nq;
vector<vector<string>> solveNQueens(int n) {
    nq = n;
    string s(n, '.');
    vector<string> temp(n, s);
    backtracking(0, temp);
    return res;
}

void backtracking(int m, vector<string>& temp){
    if(m == nq){
        res.push_back(vector<string>{temp.begin(), temp.end()});
    }else{
        for(int i = 0; i < nq; i++){
            //尝试性当前位置加入Q
            if(insertQ(m, i, temp)){
                temp[m][i] = 'Q';
                //开始回溯下一个Q
                backtracking(m + 1, temp);
                //回溯
                temp[m][i] = '.';
            }
        }
    }
}

bool insertQ(int m, int n, vector<string>& temp){
    int i, j;
    //判断当前行是否有Q
    for(int i = 0; i < nq; i++){
        if(temp[m][i] == 'Q') return false;
    }
    //判断当前列是否有Q
    for(int i = 0; i < nq; i++){
        if(temp[i][n] == 'Q') return false;
    }
    //判断对角线(\)
    i = m, j = n;
    while(i >= 0 && j >= 0){
        if(temp[i--][j--] == 'Q') return false;
    }
    i = m, j = n;
    while(i < nq && j < nq){
        if(temp[i++][j++] == 'Q') return false;
    }
    //判断对角线(/)
    i = m, j = n;
    while(i >= 0 && j < nq){
        if(temp[i--][j++] == 'Q') return false;
    }
    i = m, j = n;
    while(i < nq && j >= 0){
        if(temp[i++][j--] == 'Q') return false;
    }

    return true;
}
