链接：https://leetcode-cn.com/problems/scramble-string
给定一个字符串 s1，我们可以把它递归地分割成两个非空子字符串，从而将其表示为二叉树。
下图是字符串 s1 = "great" 的一种可能的表示形式。
    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
在扰乱这个字符串的过程中，我们可以挑选任何一个非叶节点，然后交换它的两个子节点。
例如，如果我们挑选非叶节点 "gr" ，交换它的两个子节点，将会产生扰乱字符串 "rgeat" 。
    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
我们将 "rgeat” 称作 "great" 的一个扰乱字符串。
同样地，如果我们继续将其节点 "eat" 和 "at" 进行交换，将会产生另一个新的扰乱字符串 "rgtae" 。
    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
我们将 "rgtae” 称作 "great" 的一个扰乱字符串。
给出两个长度相等的字符串 s1 和 s2，判断 s2 是否是 s1 的扰乱字符串。

示例 1:
输入: s1 = "great", s2 = "rgeat"
输出: true
示例 2:
输入: s1 = "abcde", s2 = "caebd"
输出: false

官方题解：https://leetcode-cn.com/problems/scramble-string/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-1-2/
思路：递归，从某处分开为左右两个字符，处理为两个子问题
          两种情况：如果s1 前k个 跟s2后k个，是扰乱字符串，那么只要看s1第k+1个到最后 与 s2第0个到len(s2)-k个是否是扰乱字符串
          如果s1 前k个 跟s2前k个，是扰乱字符串， 那么只要看s1， s2的第k+1个到最后是否是扰乱字符串
          注意长度小于等于3的情形可以单独处理，简化代码



作者：fu-ru-dong-hai
链接：https://leetcode-cn.com/problems/two-sum/solution/ji-yi-hua-sou-suo-by-fu-ru-dong-hai/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

class Solution {
public:
    string temp1, temp2;
    bool isScramble(string s1, string s2) {
        transform(s1.begin(), s1.end(), s1.begin(), :: toupper);
        transform(s2.begin(), s2.end(), s2.begin(), :: toupper);
        temp1 = s1;
        temp2 = s2;
        if(s1.length() != s2.length()) return false;
        cout<<temp1<<endl;
        cout<<temp2<<endl;
        return cmp(0, s1.length() - 1, 0, s2.length() - 1);
    }
    
    bool cmp(int left1, int right1, int left2, int right2){
        vector<int> temp(26, 0);
        for(int i = left1; i <= right1; i++){
            temp[temp1[i] - 'A']++;
        }
        for(int i = left2; i <= right2; i++){
            temp[temp2[i] - 'A']--;
        }
        //判断两者是否有可能成为扰乱字符串
        for(auto it : temp){
            if(it != 0) return false;
        }
        if(right1 - left1 <= 1){
            return true;
        }else{
            for(int i = 0; i <= right1 - left1 - 1; i++){
                //两种情况
                //两个字符串左边匹配
                if(cmp(left1, left1 + i, left2, left2 + i) && cmp(left1 + i + 1, right1, left2 + i + 1, right2)){
                    return true;
                }
                //分开的字符串有第二个字符串右边匹配
                if(cmp(left1, left1 + i, right2 - i, right2) && cmp(left1 + i + 1, right1, left2, right2 - i - 1)){
                    return true;
                }
            }
        }
        return false;
    }
};
