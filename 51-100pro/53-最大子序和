链接：https://leetcode-cn.com/problems/maximum-subarray
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
示例:
输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6

思路：分治思想，当前串的最大子序列，只能位于左边，右边或者包含中间，每次取三者中的最大值

int maxSubArray(vector<int>& nums) {
    return mergeFind(0, nums.size() - 1, nums);
}
//分治函数
int mergeFind(int start, int end, vector<int>& nums){
    int mid = (start + end) / 2;
    int maxLeft = 0, maxRight = 0, maxLR = 0;
    //若子串的长度为1，则直接返回
    if(start == end) return nums[start];
    if(start < end){
        //计算左边和右边，并取二者最大值
        maxLeft = mergeFind(start, mid, nums);
        maxRight = mergeFind(mid + 1, end, nums);
        maxLR = max(maxLeft, maxRight);
    }
    //分别计算从mid开始的左边和右边子序列的和，并相加
    int maxMidL = nums[mid], maxMidR = nums[mid], temp1 = 0, temp2 = 0;
    for(int i = mid; i >= start; i--){
        temp1 += nums[i];
        maxMidL = max(maxMidL, temp1);
    }
    for(int i = mid; i <= end; i++){
        temp2 += nums[i];
        maxMidR = max(maxMidR, temp2);
    }
    //返回左边，右边，和中间的子序列和的最大值
    return max(maxLR, maxMidL + maxMidR - nums[mid]);
}
