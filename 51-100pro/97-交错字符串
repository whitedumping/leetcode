链接：https://leetcode-cn.com/problems/interleaving-string
给定三个字符串 s1, s2, s3, 验证 s3 是否是由 s1 和 s2 交错组成的。

示例 1:

输入: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
输出: true
示例 2:

输入: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
输出: false


动态规划：dp[i][j]表示s1的前i - 1个字符与s2前j - 1个字符能够与s3的i + j - 1个字符交错匹配
class Solution {
public:
    string ss1, ss2, ss3;
    bool isInterleave(string s1, string s2, string s3) {
        int len1= s1.length(), len2 = s2.length(), index = s3.length();
        if(len1 + len2 < index || len1 + len2 > index) return false;
        if(len1 == 0){
            if(s2 == s3) return true;
            else return false;
        }else if(len2 == 0){
            if(s1 == s3) return true;
            else return false;
        }else{
            if(index == 0 && (len1 != 0 || len2 != 0)) return false;
        }
        vector<vector<int>> dp = vector(len1 + 1, vector<int>(len2 + 1, 0));
        for(int i = 0; i <= len1; i++){
            for(int j = 0; j <= len2; j++){
                if(i == 0 && j == 0) dp[i][j] = 1;
                else if(i == 0) dp[i][j] = dp[0][j - 1] & (s2[j - 1] == s3[i + j - 1]);
                else if(j == 0) dp[i][j] = dp[i - 1][0] & (s1[i - 1] == s3[i + j - 1]);
                else dp[i][j] = (dp[i - 1][j] & (s1[i - 1] == s3[i + j - 1])) | (dp[i][j - 1] & (s2[j - 1] == s3[i + j - 1]));
            }
        }
        return dp[len1][len2];
    }
};
