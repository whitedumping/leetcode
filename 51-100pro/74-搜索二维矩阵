链接：https://leetcode-cn.com/problems/search-a-2d-matrix
编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：
每行中的整数从左到右按升序排列。
每行的第一个整数大于前一行的最后一个整数

示例 1:
输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
输出: true

示例 2:
输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
输出: false

思路：把二维数组看成一个一维数组进行二分查找，如何将mid值转换为坐标（当前的mid值从0开始，并非直接表示第几个元素）

bool searchMatrix(vector<vector<int>>& matrix, int target) {
    if(matrix.empty()) return false;
    int len1 = matrix.size(), len2 = matrix[0].size();
    if(len2 == 0) return false;
    int left = 0, right = len1 * len2, mid;
    int a, b;
    while(left < right){
        mid = left + (right - left) / 2;
        a = mid / len2, b = mid % len2;
        if(matrix[a][b] == target) return true;
        else if(matrix[a][b] < target) left = mid + 1;
        else right = mid;
    }
    return false;
}
