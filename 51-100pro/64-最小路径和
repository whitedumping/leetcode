链接：https://leetcode-cn.com/problems/minimum-path-sum
给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。

示例:
输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

思路：和上面两题类似，到达当前格子路径最小值为能到达左边和上边格子的最小值加当前格子本身的值 dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + grid[i][j]

int minPathSum(vector<vector<int>>& grid) {
    int m = grid.size(), n = grid[0].size();
    vector<int> up(n, 0);
    int res = 0, t;
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            //每次的res相对于表示上一次计算结果，对下一次计算而言，相当于左边的值，只需要加对应的up[j]即可
            //res += up[j];
            if(i != 0 && j != 0){
                res = min(res, up[j]);
            }else if(j == 0){
                res = up[j];
            }
            up[j] = res + grid[i][j];
            res = up[j];
        }
        res = 0;
    }
    return up[n - 1];
}
