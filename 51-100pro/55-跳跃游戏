链接：https://leetcode-cn.com/problems/jump-game
给定一个非负整数数组，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个位置。
示例 1:
输入: [2,3,1,1,4]
输出: true
解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置

示例 2:
输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

思路：回溯：按照回溯模板依次对当前可以到达的位置进行递归，若不能达到最后一个位置则返回
     动态规划：（自底向上）设置一个数组，标记每一个位置是否为能达到最后一个位置，若能达到这表示当前位置为好位置，若不能则差位置
              若能到达一个好位置，则表明在当前好位置上能去最后一个位置
     贪心：根据动态规划思想处理的标记数组，只要保证每次到达一个好位置即可

贪心代码
bool canJump(vector<int>& nums) {
    int len = nums.size();
    int lastpos = len - 1;
    //将到达的好位置作为当前需要到达的最后位置
    for(int i = len - 1; i >= 0; i--){
        if(nums[i] + i >= lastpos) lastpos = i;
    }
    return lastpos == 0;
}
