给你一个整数数组 nums ，请你求出乘积为正数的最长子数组的长度。

一个数组的子数组是由原数组中零个或者更多个连续数字组成的数组。

请你返回乘积为正数的最长子数组长度。

 

示例  1：

输入：nums = [1,-2,-3,4]
输出：4
解释：数组本身乘积就是正数，值为 24 。
示例 2：

输入：nums = [0,1,-2,-3,-4]
输出：3
解释：最长乘积为正数的子数组为 [1,-2,-3] ，乘积为 6 。
注意，我们不能把 0 也包括到子数组中，因为这样乘积为 0 ，不是正数。
示例 3：

输入：nums = [-1,-2,-3,0,1]
输出：2
解释：乘积为正数的最长子数组是 [-1,-2] 或者 [-2,-3] 。
示例 4：

输入：nums = [-1,2]
输出：1
示例 5：

输入：nums = [1,2,3,5,-6,4,0,10]
输出：4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//以0分段，遇到负数则子分段，所有的子分段保存vector，最后求子分段的最大长度

class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        nums.push_back(0);
        int len = nums.size();

        int ans = 0, t = 0, t_ = 0, total = 0;
        vector<int> temp;
        for(int i = 0; i < len; ++i){
            if(nums[i] > 0) ++t;
            else if(nums[i] < 0){
                temp.push_back(t);
                total += t;
                t = 0;
                ++t_;
            }else{
                //deal
                temp.push_back(t);
                total += t;
                if(t_ % 2){
                    t = total - min(temp[0], temp[temp.size() - 1]) + t_ - 1;
                    ans = max(ans, t);
                }else ans = max(ans, total + t_);

                temp.clear();
                total = 0;
                t = 0;
                t_ = 0;
            }
        }
        return ans;
    }
};
