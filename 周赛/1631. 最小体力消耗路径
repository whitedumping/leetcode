你准备参加一场远足活动。给你一个二维 rows x columns 的地图 heights ，其中 heights[row][col] 表示格子 (row, col) 的高度。一开始你在最左上角的格子 (0, 0) ，且你希望去最右下角的格子 (rows-1, columns-1) （注意下标从 0 开始编号）。你每次可以往 上，下，左，右 四个方向之一移动，你想要找到耗费 体力 最小的一条路径。

一条路径耗费的 体力值 是路径上相邻格子之间 高度差绝对值 的 最大值 决定的。

请你返回从左上角走到右下角的最小 体力消耗值 。

 

示例 1：



输入：heights = [[1,2,2],[3,8,2],[5,3,5]]
输出：2
解释：路径 [1,3,5,3,5] 连续格子的差值绝对值最大为 2 。
这条路径比路径 [1,2,2,2,5] 更优，因为另一条路劲差值最大值为 3 。
示例 2：



输入：heights = [[1,2,3],[3,8,4],[5,3,5]]
输出：1
解释：路径 [1,2,3,4,5] 的相邻格子差值绝对值最大为 1 ，比路径 [1,3,5,3,5] 更优。
示例 3：


输入：heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
输出：0
解释：上图所示路径不需要消耗任何体力。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/path-with-minimum-effort
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
public:
    vector<int> dir{-1, 0, 1, 0, -1};
    int m, n;
    bool dfs(vector<vector<int>>& heights, vector<vector<int>>& visited, int a, int b, int mid){
        if(a == m - 1 && n - 1 == b){
            return true;
        }
        int x, y, flag = false;
        for(int i = 0; i < 4; ++i){
            x = a + dir[i];
            y = b + dir[i + 1];
            if(x >= 0 && x < m && y >= 0 && y < n && !visited[x][y] && abs(heights[a][b] - heights[x][y]) <= mid){
                visited[x][y] = 1;
                flag |= dfs(heights, visited, x, y, mid);
                if(flag) break;
            }
        }
        return flag;
    }
    int minimumEffortPath(vector<vector<int>>& heights) {
        int left = 0, right = 1e6 + 5, mid, res;
        m = heights.size(), n = heights[0].size();
        while(left < right){
            //cout<<left<<" "<<right<<endl;
            mid = (right + left) >> 1;
            vector<vector<int>> visited(m, vector<int>(n));
            if(dfs(heights, visited, 0, 0, mid)) res = mid, right = mid;
            else left = mid + 1;
        }
        return res;
    }
};
