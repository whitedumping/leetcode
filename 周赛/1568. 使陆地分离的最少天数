给你一个由若干 0 和 1 组成的二维网格 grid ，其中 0 表示水，而 1 表示陆地。岛屿由水平方向或竖直方向上相邻的 1 （陆地）连接形成。

如果 恰好只有一座岛屿 ，则认为陆地是 连通的 ；否则，陆地就是 分离的 。

一天内，可以将任何单个陆地单元（1）更改为水单元（0）。

返回使陆地分离的最少天数。

 

示例 1：



输入：grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]
输出：2
解释：至少需要 2 天才能得到分离的陆地。
将陆地 grid[1][1] 和 grid[0][2] 更改为水，得到两个分离的岛屿。
示例 2：

输入：grid = [[1,1]]
输出：2
解释：如果网格中都是水，也认为是分离的 ([[1,1]] -> [[0,0]])，0 岛屿。
示例 3：

输入：grid = [[1,0,1,0]]
输出：0
示例 4：

输入：grid = [[1,1,0,1,1],
             [1,1,1,1,1],
             [1,1,0,1,1],
             [1,1,0,1,1]]
输出：1
示例 5：

输入：grid = [[1,1,0,1,1],
             [1,1,1,1,1],
             [1,1,0,1,1],
             [1,1,1,1,1]]
输出：2

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//题解，dfs遍历，若遍历的节点与所有节点不相等，这两块岛
//最多断两个岛就可以满足要求，枚举一次的所有点


class Solution {
public:
    int len_i, len_j;
    int arrs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    int minDays(vector<vector<int>>& grid) {
        len_i = grid.size(), len_j = grid[0].size();

        int total = 0, ans = 0;
        bool flag = true;
        for(int i = 0; i < len_i; ++i){
            for(int j = 0; j < len_j; ++j){
                total += grid[i][j];
                if(flag && grid[i][j]){
                    vector<vector<int>> temp(grid);
                    ans = dfs(temp, i, j);
                    flag = false;
                }
            }
        }
        
        if(!total || (ans != total)) return 0;


        for(int i = 0; i < len_i; ++i){
            for(int j = 0; j < len_j; ++j){
                //i,j的坐标
                if(grid[i][j]){
                    grid[i][j] = 0;
                    vector<vector<int>> temp(grid);
                    for(int k = 0; k < 4; ++k){
                        int a = i + arrs[k][0];
                        int b = j + arrs[k][1];
                        if(a >= 0 && a < len_i && b >= 0 && b < len_j && temp[a][b]){
                            ans = dfs(temp, a, b);
                            break;
                        }
                    }
                    //ans = dfs(temp, i, j);
                    cout<<ans<<endl;
                    if(total != ans + 1) return 1;
                    grid[i][j] = 1;
                }
            }
        }

        return 2;
    }
    //深度遍历
    int dfs(vector<vector<int>>& temp, int start, int end){
        int a, b, ans = 1;
        temp[start][end] = 0;
        for(int k = 0; k < 4; ++k){
            a = start + arrs[k][0];
            b = end + arrs[k][1];
            if(a >= 0 && a < len_i && b >= 0 && b < len_j && temp[a][b]){
                ans += dfs(temp, a, b);
            }
        }
        return ans;
    }
};
