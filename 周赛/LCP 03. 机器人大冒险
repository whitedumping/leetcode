力扣团队买了一个可编程机器人，机器人初始位置在原点(0, 0)。小伙伴事先给机器人输入一串指令command，机器人就会无限循环这条指令的步骤进行移动。指令有两种：

U: 向y轴正方向移动一格
R: 向x轴正方向移动一格。
不幸的是，在 xy 平面上还有一些障碍物，他们的坐标用obstacles表示。机器人一旦碰到障碍物就会被损毁。

给定终点坐标(x, y)，返回机器人能否完好地到达终点。如果能，返回true；否则返回false。

 

示例 1：

输入：command = "URR", obstacles = [], x = 3, y = 2
输出：true
解释：U(0, 1) -> R(1, 1) -> R(2, 1) -> U(2, 2) -> R(3, 2)。
示例 2：

输入：command = "URR", obstacles = [[2, 2]], x = 3, y = 2
输出：false
解释：机器人在到达终点前会碰到(2, 2)的障碍物。
示例 3：

输入：command = "URR", obstacles = [[4, 2]], x = 3, y = 2
输出：true
解释：到达终点后，再碰到障碍物也不影响返回结果。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/programmable-robot
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//循环找所有点，超时
//需要每次移动一个最大的循环
//每次比较障碍点即可

class Solution {
public:
    int mx = 0, my = 0;
    bool find(string& command, int a, int b){
        int loops = min(a / mx, b / my);
        int x = loops * mx, y = loops * my;
        if(x == a && y == b) return true;
        for(int i : command){
            if(i == 'U') ++y;
            else ++x;
            if(x == a && y == b) return true;
        }
        return false;
    }
    bool robot(string command, vector<vector<int>>& obstacles, int x, int y) {
        for(auto i : command){
            if(i == 'U') ++my;
            else ++mx;
        }
        int flag = find(command, x, y), a, b;
        if(!flag) return false;

        for(auto o : obstacles){
            a = o[0], b = o[1];
            if(a <= x && b <= y && find(command, a, b)) return false;
        }
        return true;
    }
};
