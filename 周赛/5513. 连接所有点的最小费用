给你一个points 数组，表示 2D 平面上的一些点，其中 points[i] = [xi, yi] 。

连接点 [xi, yi] 和点 [xj, yj] 的费用为它们之间的 曼哈顿距离 ：|xi - xj| + |yi - yj| ，其中 |val| 表示 val 的绝对值。

请你返回将所有点连接的最小总费用。只有任意两点之间 有且仅有 一条简单路径时，才认为所有点都已连接。

示例 1：

输入：points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
输出：20
解释：

我们可以按照上图所示连接所有点得到最小总费用，总费用为 20 。
注意到任意两个点之间只有唯一一条路径互相到达。
示例 2：

输入：points = [[3,12],[-2,5],[-4,1]]
输出：18
示例 3：

输入：points = [[0,0],[1,1],[1,0],[-1,1]]
输出：4
示例 4：

输入：points = [[-1000000,-1000000],[1000000,1000000]]
输出：4000000
示例 5：

输入：points = [[0,0]]
输出：0

class Solution {
public:
    struct Node{
        int u1, u2, v = 0;
        Node(int a, int b, int c){
            u1 = a;
            u2 = b;
            v = c;
        }
    };
    int minCostConnectPoints(vector<vector<int>>& points) {
        int a = points.size(), temp;
        if(a < 2) return 0;
        long long ans = 0;
        
        vector<int> p;
        p.push_back(0);
        
        vector<Node> cur;
        for(int i = 1; i < a; ++i){
            cur.push_back(Node(i, 0, dis(points[i], points[0])));
        }
        
        while(p.size() < a){
            sort(cur.begin(), cur.end(), cmp);
            ans = ans + cur[0].v;
            //maintain
            for(int i = 1; i < cur.size(); ++i){
                temp = dis(points[cur[i].u1], points[cur[0].u1]);
                if(cur[i].v > temp){
                    cur[i].u2 = cur[0].u1;
                    cur[i].v = temp;
                }
            }
            p.push_back(cur[0].u1);
            cur.erase(cur.begin());
        }
        
        return ans;
        
    }
    
    void maintian(vector<int>& p, int cur){
        
    }
    
    int dis(vector<int>& a, vector<int>& b){
        return fabs(a[0] - b[0]) + fabs(a[1] - b[1]);
    }
    
    static bool cmp(Node &a, Node &b){
        return a.v < b.v;
    }
};
