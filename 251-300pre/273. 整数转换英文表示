将非负整数转换为其对应的英文表示。可以保证给定输入小于 231 - 1 。

示例 1:

输入: 123
输出: "One Hundred Twenty Three"
示例 2:

输入: 12345
输出: "Twelve Thousand Three Hundred Forty Five"
示例 3:

输入: 1234567
输出: "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"
示例 4:

输入: 1234567891
输出: "One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One"

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/integer-to-english-words
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
public:
    vector<string> single{"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"};
    vector<string> tenup{"Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    vector<string> ten{"Ten","Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        
    string numberToWords(int num) {
        if(num == 0) return "Zero";
        
        string res = "";
        int temp = num / 1000000000 % 1000;
        res += numsToWord(temp);
        if(res != "" && temp) res += " Billion";
        temp = num / 1000000 % 1000;
        res += numsToWord(temp);
        if(res != "" && temp) res += " Million";
        temp = num / 1000 % 1000;
        res += numsToWord(temp);
        if(res != "" && temp) res += " Thousand";
        res += numsToWord(num % 1000);
        
        res.erase(res.begin());
        return res;
    }
    
    string numsToWord(int temp){
        string res;
        while(temp){
            if(temp >= 100) res += " " + single[temp / 100 - 1] + " Hundred", temp %= 100;
            else if(temp % 10 == 0) res += " " + ten[temp / 10 - 1], temp = 0;
            else if(temp >= 1 && temp <= 9) res += " " + single[temp - 1], temp = 0;
            else if(temp > 10 && temp < 20) res += " " + tenup[temp - 11], temp = 0;
            else res += " " + ten[temp / 10 - 1], temp %= 10;
        }
        return res;
    }
};
