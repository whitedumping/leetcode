给定一个无序的整数数组，找到其中最长上升子序列的长度。

示例:

输入: [10,9,2,5,3,7,101,18]
输出: 4 
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。
说明:

可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。
你算法的时间复杂度应该为 O(n2) 。
进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-increasing-subsequence
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

题解：https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-dong-tai-gui-hua-e/
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int len = nums.size();
        vector<int> cell;
        for(int i = 0; i < len; ++i){
            if(!i) cell.push_back(nums[i]);
            else{
                if(nums[i] > cell.back()) cell.push_back(nums[i]);
                else if(nums[i] == cell.back()) continue;
                else{
                    vector<int> :: iterator it = lower_bound(cell.begin(), cell.end(), nums[i]);
                    //cout<<it - cell.begin()<<endl;
                    cell[it - cell.begin()] = nums[i];
                    //for(auto c : cell) cout<<c<<" ";
                    //cout<<endl;
                }
            }
        }
        return cell.size();
    }
};
