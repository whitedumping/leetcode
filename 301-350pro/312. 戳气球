有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组 nums 中。

现在要求你戳破所有的气球。如果你戳破气球 i ，就可以获得 nums[left] * nums[i] * nums[right] 个硬币。 这里的 left 和 right 代表和 i 相邻的两个气球的序号。注意当你戳破了气球 i 后，气球 left 和气球 right 就变成了相邻的气球。

求所能获得硬币的最大数量。

说明:

你可以假设 nums[-1] = nums[n] = 1，但注意它们不是真实存在的所以并不能被戳破。
0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100
示例:

输入: [3,1,5,8]
输出: 167 
解释: nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
     coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/burst-balloons
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//类似于二分思想，中间结果用数组保存，可以优化空间复杂度，只用到了矩阵中的上三角形
//dp[i][j] = for k; dp[i][k] + dp[k][j] + sum
class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int len = nums.size();
        vector<vector<int>> dp(len + 2, vector<int>(len + 2, 0));

        //inital val, set front and rear is 1
        vector<int> val(len + 2, 0);
        val[0] = 1;
        val[len + 1] = 1;
        for(int i = 0; i < len; ++i){
            val[i + 1] = nums[i];
        }
        int sum;
        for(int i = 2; i < len + 2; ++i){
            for(int j = i - 2; j >= 0; --j){
                for(int k = i - 1; k > j; --k){
                    sum = val[j] * val[k] * val[i];
                    sum += dp[j][k] + dp[k][i];
                    dp[j][i] = max(dp[j][i], sum);
                }
            }
        }
        /*
        for(auto i : dp){
            for(auto ii : i) cout<<ii<<" ";
            cout<<endl;
        }*/
        return dp[0][len + 1];
    }
};
