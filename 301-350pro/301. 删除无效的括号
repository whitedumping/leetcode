删除最小数量的无效括号，使得输入的字符串有效，返回所有可能的结果。

说明: 输入可能包含了除 ( 和 ) 以外的字符。

示例 1:

输入: "()())()"
输出: ["()()()", "(())()"]
示例 2:

输入: "(a)())()"
输出: ["(a)()()", "(a())()"]
示例 3:

输入: ")("
输出: [""]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-invalid-parentheses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
public:
    vector<string> res;
    vector<string> removeInvalidParentheses(string s) {
        int left = 0, right = 0;
        for(auto i : s){
            if(i == '(') ++left;
            else if(i == ')'){
                if(left > 0) --left;
                else ++right;
            }else continue;
        }
        dfs(s, 0, left, right);
        //cout<<left<<" "<<right<<endl;
        return res;
    }
    
    void dfs(string s, int start, int left, int right){
        if(!left && !right){
            if(isV(s)) res.push_back(s);
        }else{
            for(int i = start; i < s.length(); i++){
                // 去重
                if(i-1 >= start && s[i] == s[i-1]) continue;
                if(s[i] == '(' && left > 0) dfs(s.substr(0, i) + s.substr(i + 1, s.length() - i - 1), i, left - 1, right);
                if(s[i] == ')' && right > 0) dfs(s.substr(0, i) + s.substr(i + 1, s.length() - i - 1), i, left, right - 1);
            }
        }
    }
    
    bool isV(string s){
        int left = 0, right = 0;
        for(auto i : s){
            if(i == '(') ++left;
            else if(i == ')'){
                if(left > 0) --left;
                else ++right;
            }else continue;
        }
        return !left && !right;
    }
};
