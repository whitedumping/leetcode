给定长度分别为 m 和 n 的两个数组，其元素由 0-9 构成，表示两个自然数各位上的数字。现在从这两个数组中选出 k (k <= m + n) 个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。

求满足该条件的最大数。结果返回一个表示该最大数的长度为 k 的数组。

说明: 请尽可能地优化你算法的时间和空间复杂度。

示例 1:

输入:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
输出:
[9, 8, 6, 5, 3]
示例 2:

输入:
nums1 = [6, 7]
nums2 = [6, 0, 4]
k = 5
输出:
[6, 7, 6, 0, 4]
示例 3:

输入:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
输出:
[9, 8, 9]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/create-maximum-number
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
public:
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
        int len1 = nums1.size(), len2 = nums2.size();
        vector<int> temp1, temp2, temp, res;
        //分治思想，将两个序列，分别选取其中一部分，和为k，在组成最大序列
        for(int s = max(0, k - len2); s <= min(k, len1); ++s){
            temp.clear();
            temp1 = maxSequence(nums1, s);
            temp2 = maxSequence(nums2, k - s);
            
            auto it1 = temp1.begin(), it2 = temp2.begin();
            while(it1 != temp1.end() || it2 != temp2.end()){
                temp.push_back(lexicographical_compare(it1, temp1.end(), it2, temp2.end()) ? *it2++ : *it1++);
            }
            res = lexicographical_compare(res.begin(), res.end(), temp.begin(), temp.end()) ? temp : res;
        }
        return res;
    }
    //选取序列中k个字符，组成的最大的字典序
    vector<int> maxSequence(vector<int> num, int k){
        int len = num.size();
        if(len <= k) return num;
        vector<int> res;
        int cur_i = len - k;
        for(int i = 0; i < len; ++i){
            while(!res.empty() && num[i] > res.back() && cur_i-- > 0){
                res.pop_back();
            }
            res.push_back(num[i]);
        }
        res.resize(k);
        return res;
    }
};
