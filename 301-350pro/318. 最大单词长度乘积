给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。

示例 1:

输入: ["abcw","baz","foo","bar","xtfn","abcdef"]
输出: 16 
解释: 这两个单词为 "abcw", "xtfn"。
示例 2:

输入: ["a","ab","abc","d","cd","bcd","abcd"]
输出: 4 
解释: 这两个单词为 "ab", "cd"。
示例 3:

输入: ["a","aa","aaa","aaaa"]
输出: 0 
解释: 不存在这样的两个单词。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-product-of-word-lengths
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


//位运算，将单词含有哪些字母转成对应26位的数，通过&运算来比较判断是否含有同样的字母
class Solution {
public:
    int maxProduct(vector<string>& words) {
        vector<int> mask;
        map<int, int> m;

        int temp;
        for(auto word : words){
            temp = 0;
            for(auto i : word){
                temp |= 1 << (i - 'a');
            }
            if(m.find(temp) == m.end()){
                m[temp] = word.length();
                mask.push_back(temp);
            }else m[temp] = max(m[temp], (int)word.length());
        }

        int len = mask.size(), res = 0;
        for(int i = 0; i < len - 1; ++i){
            for(int j = i + 1; j < len; ++j){
                if((mask[i] & mask[j]) == 0){
                    res = max(res, m[mask[i]] * m[mask[j]]);
                    //cout<<res<<endl;
                }
            }
        }
        /*
        for(map<int, int> :: iterator it = m.begin(); it != m.end(); ++it){
            cout<<it->first<<" "<<it->second<<endl;
        }*/
        return res;
    }
};
