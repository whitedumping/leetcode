给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:

输入: [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
public:
    //dp[i][j]  表示第i天，做出的j选择后的收益，j取0，1，2（未持有，持有，停）
    int maxProfit(vector<int>& prices) {
        int len = prices.size();
        if(len < 2) return 0;
        //vector<vector<int>> dp(len + 1, vector<int>(3, 0));

        //dp[0][0] = 0;
        //dp[0][1] = -prices[0];
        
        int dp00 = 0, dp01 = -prices[0], dp02 = 0, t;
        for(int i = 1; i <= len; ++i){
            //未持有(上一次的卖掉)
            //dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i - 1]);
            //持有(再次买入)
            //dp[i][1] = max(dp[i - 1][1], dp[i - 1][2] - prices[i - 1]);
            //停
            //dp[i][2] = dp[i - 1][0];

            //cout<<dp00<<" "<<dp01<<" "<<dp02<<endl;
            t = dp00;
            dp00 = max(dp00, dp01 + prices[i - 1]);
            dp01 = max(dp01, dp02 - prices[i - 1]);
            dp02 = t;
        }
        return max(dp00, dp02);
    }
};
