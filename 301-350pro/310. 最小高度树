对于一个具有树特征的无向图，我们可选择任何一个节点作为根。图因此可以成为树，在所有可能的树中，具有最小高度的树被称为最小高度树。给出这样的一个图，写出一个函数找到所有的最小高度树并返回他们的根节点。

格式

该图包含 n 个节点，标记为 0 到 n - 1。给定数字 n 和一个无向边 edges 列表（每一个边都是一对标签）。

你可以假设没有重复的边会出现在 edges 中。由于所有的边都是无向边， [0, 1]和 [1, 0] 是相同的，因此不会同时出现在 edges 里。

示例 1:

输入: n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3 

输出: [1]
示例 2:

输入: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5 

输出: [3, 4]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-height-trees
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        //建树
        vector<vector<int>> g(n, vector<int>());
        vector<int> degree(n, 0);
        vector<int> res;

        int len = edges.size();
        if(n < 3){
            for(int i = 0; i < n; ++i) res.push_back(i);
            return res;
        }
        for(int i = 0; i < len; ++i){
            g[edges[i][0]].push_back(edges[i][1]);
            g[edges[i][1]].push_back(edges[i][0]);

            degree[edges[i][0]] += 1;
            degree[edges[i][1]] += 1;
        }

        queue<int> nodes;
        unordered_set<int> visited;
        for(int i = 0; i < n; ++i){
            if(degree[i] == 1) {
                nodes.push(i);
            }
        }

        //当前节点有度为1的
        while(!nodes.empty()){
            res.clear();
            int nodes_len = nodes.size(), temp;
            while(nodes_len--){
                temp = nodes.front();
                nodes.pop();
                res.push_back(temp);
                visited.insert(temp);
                for(auto j : g[temp]){
                    degree[j]--;
                    if(visited.find(j) == visited.end() && degree[j] == 1){
                        nodes.push(j);
                    }
                }
            }
        }
        return res;
    }
};
