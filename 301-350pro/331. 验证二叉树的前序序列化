序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #。

     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
例如，上面的二叉树可以被序列化为字符串 "9,3,4,#,#,1,#,#,2,#,6,#,#"，其中 # 代表一个空节点。

给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。

每个以逗号分隔的字符或为一个整数或为一个表示 null 指针的 '#' 。

你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如 "1,,3" 。

示例 1:

输入: "9,3,4,#,#,1,#,#,2,#,6,#,#"
输出: true
示例 2:

输入: "1,#"
输出: false
示例 3:

输入: "9,#,#,1"
输出: false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//根据出度，入度来计算
//初始情况度为1

class Solution {
public:
    bool isValidSerialization(string preorder) {
        preorder += ",";
        int len = preorder.length();
        int i = 0, p = 1, pre = 0;
        while(i < len){
            if(preorder[i] == ','){
                string s = preorder.substr(pre, i - pre);
                pre = i + 1;
                if(p == 0) return 0;//中间需要时刻判断度为零
                if(s == "#") --p;//#节点，表示度减一
                else ++p;//度加一
            }
            ++i;
        }
        return p == 0;//最后为零度
    }
};

class Solution {
public:
    bool isValidSerialization(string preorder) {
        vector<string> s = split(preorder, ',');
        int len = s.size();
        if(len % 2 == 0) return 0;
        int i = 0, t = 1;
        while(i < len){
            --t;
            if(t < 0) return 0;
            if(s[i++] != "#") t += 2;
        }
        return t == 0;
    }

    bool dfs(vector<string> &s, int i){
        if(s[i] == "#") return 1;
        int len = s.size();
        if(i + 2 < len) return dfs(s, i + 1) && dfs(s, i + 2);
        return 0;
    }

    void _split(const string &s, char delim, vector<string> &elems) {
        stringstream ss(s);
        string item;

        while (getline(ss, item, delim)) {
            elems.push_back(item);
        }
    }

    vector<string> split(const string &s, char delim) {
        vector<string> elems;
        _split(s, delim, elems);
        return elems;
    }
};
