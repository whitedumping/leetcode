leetcode题目https://leetcode-cn.com/problems/trapping-rain-water
给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水，即寻找能够盛到多少水
上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，数字表示柱子的高度
示例:
输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6

思路：计算所有可能的格子即填满水后和柱子的格子数，减去柱子的格子数
int trap(vector<int>& height) {
    int ans = 0, len = height.size();
    if(len == 0) return 0;
    int left = 0, right = len - 1, temp, pre = 0;
    while(left < right){
        //减去柱子的格子数
        if(height[left] <= pre) ans -= height[left++];
        else if(height[right] <= pre) ans -= height[right--];
        //计算所有的个格子数
        else if(height[left] == height[right]){
            ans += (right - left + 1) * (height[left] - pre);
            pre = height[left];
        }else if(height[left] < height[right]){
            ans += (right - left + 1) * (height[left] - pre);
            pre = height[left];
        }else{
            ans += (right - left + 1) * (height[right] - pre);
            pre = height[right];
        }
    }
    ans -= (height[left] > pre ? pre : height[left]);
    return ans;
}

双指针：思路和上面的差不多，不过比上面的思路较好，不需要计算所有的格子数
int trap(vector<int>& height)
{
    int left = 0, right = height.size() - 1;
    int ans = 0;
    int left_max = 0, right_max = 0;
    while (left < right) {
        //左边低于右边，且当前柱子低于左边最高的柱子，则能盛水，水量为left_max - height[left]，否则跟新左边最高柱子
        if (height[left] < height[right]) {
            height[left] >= left_max ? (left_max = height[left]) : ans += (left_max - height[left]);
            ++left;
        }
        else {
            height[right] >= right_max ? (right_max = height[right]) : ans += (right_max - height[right]);
            --right;
        }
    }
    return ans;
}

使用栈，思路：柱子的高度依次入栈，若后者高于前者，则判断是否能盛水
int trap(vector<int>& height) {
    int current = 0, len = height.size(), top, ans = 0;
    stack<int> st;
    while(current < len){
        while(!st.empty() && height[current] > height[st.top()]){
            top = st.top();
            st.pop();
            if(st.empty()) break; //表示虽然有高度差，但是不能盛水
            ans += (current - st.top() - 1) * (min(height[current], height[st.top()]) - height[top]);
        }
        st.push(current++);
    }
    return ans;
}
