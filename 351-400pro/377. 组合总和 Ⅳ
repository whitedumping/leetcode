给定一个由正整数组成且不存在重复数字的数组，找出和为给定目标正整数的组合的个数。

示例:

nums = [1, 2, 3]
target = 4

所有可能的组合为：
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

请注意，顺序不同的序列被视作不同的组合。

因此输出为 7。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/combination-sum-iv
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//回溯超时
//dp[i] = for num : nums dp[i - num]

class Solution {
public:
    int max_cnt = 0;
    int combinationSum4(vector<int>& nums, int target) {
        int len = nums.size();
        //return 0;
        if(len == 0) return 0;
        sort(nums.begin(), nums.end());
        //back(nums, target);
        vector<unsigned long long> dp(target + 1, 0);
        dp[0] = 1;
        for(int i = 1; i <= target; ++i){
            for(int t = 0; t < len; ++t){
                if(i < nums[t]) break;
                if(i >= nums[t]) dp[i] += dp[i - nums[t]];
            }
        }
        return dp[target];
    }

    void back(vector<int>& nums, int target){
        if(target == 0) ++max_cnt;
        else{
            for(auto i : nums){
                if(target < i) break;
                back(nums, target - i);
            }
        }
    }
};
