给出一个由无重复的正整数组成的集合，找出其中最大的整除子集，子集中任意一对 (Si，Sj) 都要满足：Si % Sj = 0 或 Sj % Si = 0。

如果有多个目标子集，返回其中任何一个均可。

 

示例 1:

输入: [1,2,3]
输出: [1,2] (当然, [1,3] 也正确)
示例 2:

输入: [1,2,4,8]
输出: [1,2,4,8]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/largest-divisible-subset
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//dp
//第i个结尾的，等于之前最长子+1，子能够被第i个整除

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        vector<int> res;
        if(nums.empty()) return res;
        sort(nums.begin(), nums.end());
        //for(auto i : nums) cout<<i<<" ";
        //cout<<endl;

        int len = nums.size();
        int max_len = 1, max_idx = 0;
        vector<int> dp(len, 1), pre(len);
        for(int i = 1; i < len; ++i){
            for(int j = i - 1; j >= 0; --j){
                if(nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1){
                    dp[i] = dp[j] + 1;
                    pre[i] = j;
                    if(dp[i] > max_len){
                        max_len = dp[i];
                        max_idx = i;
                    }
                }
            }
        }
        while(max_len--){
            res.emplace_back(nums[max_idx]);
            max_idx = pre[max_idx];
        }
        reverse(res.begin(), res.end());
        return res;
    }
};
