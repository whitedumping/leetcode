我们有 N 个与坐标轴对齐的矩形, 其中 N > 0, 判断它们是否能精确地覆盖一个矩形区域。

每个矩形用左下角的点和右上角的点的坐标来表示。例如， 一个单位正方形可以表示为 [1,1,2,2]。 ( 左下角的点的坐标为 (1, 1) 以及右上角的点的坐标为 (2, 2) )。



示例 1:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [3,2,4,4],
  [1,3,2,4],
  [2,3,3,4]
]

返回 true。5个矩形一起可以精确地覆盖一个矩形区域。
 



示例 2:

rectangles = [
  [1,1,2,3],
  [1,3,2,4],
  [3,1,4,2],
  [3,2,4,4]
]

返回 false。两个矩形之间有间隔，无法覆盖成一个矩形。
 



示例 3:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [3,2,4,4]
]

返回 false。图形顶端留有间隔，无法覆盖成一个矩形。
 



示例 4:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [2,2,4,4]
]

返回 false。因为中间有相交区域，虽然形成了矩形，但不是精确覆盖。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/perfect-rectangle
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//统计每个点的出现次数，最后添加最大的四个点
//判断是否每个点位偶

class Solution {
public:
    bool isRectangleCover(vector<vector<int>>& rectangles) {
        int x1 = rectangles[0][0], y1 = rectangles[0][1], x2 = rectangles[0][2], y2 = rectangles[0][3];
        map<pair<int, int>, int> points;
        int area = 0;
        for(auto r : rectangles){
            x1 = min(x1, r[0]);
            y1 = min(y1, r[1]);
            x2 = max(x2, r[2]);
            y2 = max(y2, r[3]);
            
            points[{r[0], r[1]}]++;
            points[{r[0], r[3]}]++;
            points[{r[2], r[3]}]++;
            points[{r[2], r[1]}]++;
            
            area += (r[3] - r[1]) * (r[2] - r[0]);
        }
        //判断面积是否为最大面积和
        if(area != (y2 - y1) * (x2 - x1)) return false;

        points[{x1, y1}]++;
        points[{x1, y2}]++;
        points[{x2, y2}]++;
        points[{x2, y1}]++;

        for(auto p : points){
            if(p.second % 2) return false;
        }
        return 1;
    }
};
