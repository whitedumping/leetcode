给定两个以升序排列的整形数组 nums1 和 nums2, 以及一个整数 k。

定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自 nums2。

找到和最小的 k 对数字 (u1,v1), (u2,v2) ... (uk,vk)。

示例 1:

输入: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
输出: [1,2],[1,4],[1,6]
解释: 返回序列中的前 3 对数：
     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
示例 2:

输入: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
输出: [1,1],[1,1]
解释: 返回序列中的前 2 对数：
     [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
示例 3:

输入: nums1 = [1,2], nums2 = [3], k = 3 
输出: [1,3],[2,3]
解释: 也可能序列中所有的数对都被返回:[1,3],[2,3]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
public:
    struct cmp{
        bool operator ()(pair<int, int> &a, pair<int, int> &b) {
		    return a.first + a.second > b.first + b.second;
	    }
    };
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        priority_queue<pair<int,int>, vector<pair<int,int>>, cmp>q;
        vector<vector<int>> res;
        if(nums1.size() == 0 || nums2.size() == 0 || k == 0) return res;
        //int temp = nums1.size() * nums2.size();
        //k = min(k, temp);
        //cout<<k<<endl;
        for(int i = 0; i < nums1.size() && i < k; ++i){
            for(int j = 0; j < nums2.size() && j < k; ++j){
                q.push(pair<int, int>{nums1[i], nums2[j]});
            }
        }
        while(!q.empty() && k--){
            pair<int,int> top=q.top();
            //cout<<top.first<<" "<<top.second<<endl;
            res.push_back(vector<int>{top.first, top.second});
            q.pop();
        }
        return res;
    }
};
