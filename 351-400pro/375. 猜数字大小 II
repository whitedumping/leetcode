我们正在玩一个猜数游戏，游戏规则如下：

我从 1 到 n 之间选择一个数字，你来猜我选了哪个数字。

每次你猜错了，我都会告诉你，我选的数字比你的大了或者小了。

然而，当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。直到你猜到我选的数字，你才算赢得了这个游戏。

示例:

n = 10, 我选择了8.

第一轮: 你猜我选择的数字是5，我会告诉你，我的数字更大一些，然后你需要支付5块。
第二轮: 你猜是7，我告诉你，我的数字更大一些，你支付7块。
第三轮: 你猜是9，我告诉你，我的数字更小一些，你支付9块。

游戏结束。8 就是我选的数字。

你最终要支付 5 + 7 + 9 = 21 块钱。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//dp公式
//dp[i][j] = min(max(dp[i][k - 1], dp[k + 1][j]) + k, dp[i][j])

class Solution {
public:
    int getMoneyAmount(int n) {
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, INT_MAX));
        for(int i = 0; i <= n; ++i) dp[i][i] = 0;
        
        for(int i = n; i > 0; --i){
            for(int j = i + 1; j <= n; ++j){
                //cout<<i<<" "<<j<<endl;
                for(int k = i + 1; k < j; ++k){
                    dp[i][j] = min(dp[i][j], max(dp[i][k - 1], dp[k + 1][j]) + k);
                }
                dp[i][j] = min(dp[i][j], dp[i + 1][j] + i);
                dp[i][j] = min(dp[i][j], dp[i][j - 1] + j);
            }
        }
        return dp[1][n];
        //return 0;
    }
};
