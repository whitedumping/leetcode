给出方程式 A / B = k, 其中 A 和 B 均为用字符串表示的变量， k 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回 -1.0。

输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。

 

示例 1：

输入：equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
输出：[6.00000,0.50000,-1.00000,1.00000,-1.00000]
解释：
给定：a / b = 2.0, b / c = 3.0
问题：a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
返回：[6.0, 0.5, -1.0, 1.0, -1.0 ]
示例 2：

输入：equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
输出：[3.75000,0.40000,5.00000,0.20000]
示例 3：

输入：equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
输出：[0.50000,2.00000,-1.00000,-1.00000]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/evaluate-division
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//使用并查集
//输入
//[["a","b"],["a","c"]]
//[2.0,3.0]
//[["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]

//实际结构为
//a --> b --> c
//3    3/2    1
//所以(a, b) 3 / (3/2)
//(a, c) 3 / 1

class Solution {
public:
    unordered_map<string, string> points;
    unordered_map<string, double> values;

    string myFind(string a){
        if(points[a] != a){//find parents points
            string t = myFind(points[a]);
            values[a] *= values[points[a]];
            points[a] = t;
        }
        return points[a];
    }

    void myUnion(string a, string b, double v){
        string ra = myFind(a);
        points[ra] = b;
        values[ra] = v / values[a];
    }
    

    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& vv, vector<vector<string>>& queries) {
        for(auto e : equations){
            points[e[0]] = e[0];
            values[e[0]] = 1.0;
            points[e[1]] = e[1];
            values[e[1]] = 1.0;
        }
        int len = vv.size();
        for(int i = 0; i < len; ++i){
            myUnion(equations[i][0], equations[i][1], vv[i]);
        }
        vector<double> res;
        for(auto q : queries){
            if(!points.count(q[0]) || !points.count(q[1]) || myFind(q[0]) != myFind(q[1])) res.emplace_back(-1.0);
            else res.emplace_back(values[q[0]] / values[q[1]]);
        }
        return res;
    }
};
