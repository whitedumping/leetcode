如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。

例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。

给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。

示例 1:

输入: [1,7,4,9,2,5]
输出: 6 
解释: 整个序列均为摆动序列。
示例 2:

输入: [1,17,5,10,13,15,10,5,16,8]
输出: 7
解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。
示例 3:

输入: [1,2,3,4,5,6,7,8,9]
输出: 2

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/wiggle-subsequence
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//数字排列，记录波峰波谷的个数


class Solution {
public:
    int find(vector<int>& nums){
        int len = nums.size();
        //vector<int> up, down;
        int up = 0, down = 0, up1 = 0, down1 = 0;
        //bool flag = true;//true --> up, false --> down
        bool flag = true, flag1 = false;
        long pre = nums[0], pre1 = nums[0];
        for(int i = 0; i < len; ++i){
            if(flag){//need up
                if(nums[i] > pre){
                    flag = false;
                    pre = nums[i];
                    ++up;
                }else{
                    pre = nums[i];
                }
            }else{//need down
                if(nums[i] < pre){
                    flag = true;
                    pre = nums[i];
                    ++down;
                }else pre = nums[i];
            }
            if(flag1){//need up
                if(nums[i] > pre1){
                    flag1 = false;
                    pre1 = nums[i];
                    ++up1;
                }else{
                    pre1 = nums[i];
                }
            }else{//need down
                if(nums[i] < pre1){
                    flag1 = true;
                    pre1 = nums[i];
                    ++down1;
                }else pre1 = nums[i];
            }
        }
        /*
        for(auto i : up) cout<<i<<" ";
        cout<<endl;
        for(auto i : down) cout<<i<<" ";
        cout<<endl;*/
        //return up.size() + down.size() + 1;
        return max(up1 + down1, up + down) + 1;
    }
    int wiggleMaxLength(vector<int>& nums) {
        int len = nums.size();
        if(len == 0) return 0;
        if(len == 1) return 1;
        return find(nums);
    }
};
