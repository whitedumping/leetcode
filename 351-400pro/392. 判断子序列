给定字符串 s 和 t ，判断 s 是否为 t 的子序列。

你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 <=100）。

字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。

示例 1:
s = "abc", t = "ahbgdc"

返回 true.

示例 2:
s = "axc", t = "ahbgdc"

返回 false.

后续挑战 :

如果有大量输入的 S，称作S1, S2, ... , Sk 其中 k >= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/is-subsequence
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//指针，依次寻找当前需要匹配的字符
class Solution {
public:
    bool isSubsequence(string s, string t) {
        int len1 = s.length(), len2 = t.length();
        int i = 0, j = 0;
        while(i < len1 && j < len2){
            if(s[i] == t[j]) ++i;
            ++j;
        }
        return i == len1;
    }
};


//dp f[i][j] 保存i位置后面出现的26个字母的位置
class Solution {
public:
    bool isSubsequence(string s, string t) {
        int len_s = s.length(), len_t = t.length();
        vector<vector<int>> f(len_t + 1, vector<int>(26, 0));
        for(int i = 0; i < 26; ++i) f[len_t][i] = len_t;
        for(int i  = len_t - 1; i >= 0; --i){
            for(int j = 0; j < 26; ++j){
                if(t[i] == j + 'a') f[i][j] = i;
                else f[i][j] = f[i + 1][j];
            }
        }

        int s_i = 0, t_i = 0;
        while(t_i < len_t && s_i < len_s){
            if(f[t_i][s[s_i] - 'a'] < len_t){
                t_i = f[t_i][s[s_i++] - 'a'] + 1;
            }else return false;
        }
        return s_i == len_s;
    }
};
