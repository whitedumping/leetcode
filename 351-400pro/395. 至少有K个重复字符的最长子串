找到给定字符串（由小写字符组成）中的最长子串 T ， 要求 T 中的每一字符出现次数都不少于 k 。输出 T 的长度。

示例 1:

输入:
s = "aaabb", k = 3

输出:
3

最长子串为 "aaa" ，其中 'a' 重复了 3 次。
示例 2:

输入:
s = "ababbc", k = 2

输出:
5

最长子串为 "ababb" ，其中 'a' 重复了 2 次， 'b' 重复了 3 次。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//分治，每次以小于k的字母作为分割点，分成子串计算


class Solution {
public:
    int res = 0;
    int longestSubstring(string s, int k) {
        //cout<<s<<endl;
        int pre = 0, len = s.length();
        if(len < k) return 0;

        vector<int> cnt(26, 0);
        for(auto i : s) cnt[i - 'a']++;

        //for(auto i : cnt) cout<<i<<" ";
        //cout<<endl;

        unordered_set<char> ch;
        for(int i = 0; i < 26; ++i){
            if(cnt[i] != 0 && cnt[i] < k) ch.insert(i + 'a');
        }

        if(ch.size() == 0) return s.length();
        for(int i = 0; i < len; ++i){
            if(ch.find(s[i]) != ch.end()){//find it
                res = max(res, longestSubstring(s.substr(pre, i - pre), k));
                
                pre = i + 1;
            }
        }
        res = max(res, longestSubstring(s.substr(pre, len - pre), k));
        return res;
    }
};
